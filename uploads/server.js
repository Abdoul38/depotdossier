
const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const ExcelJS = require('exceljs');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Configuration PostgreSQL pour Neon
// Configuration PostgreSQL pour LOCAL
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'edufile',
  user: process.env.DB_USER || '123456',
  password: process.env.DB_PASSWORD || 'postgres',
  ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false
});

app.use(cors());
app.use(express.json());
app.use(express.static('public'));
app.use('/uploads', express.static('uploads'));
// Middleware CORS plus permissif
app.use(cors({
  origin: ['http://localhost:3000', 'http://127.0.0.1:3000', 'http://localhost:5500'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept']
}));
app.use('/api', (req, res, next) => {
    console.log(`API Request: ${req.method} ${req.path}`);
    
    // Forcer le Content-Type JSON pour TOUTES les r√©ponses API
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    // Intercepter res.send et res.json pour garantir le JSON
    const originalSend = res.send;
    const originalJson = res.json;
    
    res.send = function(data) {
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        if (typeof data === 'object') {
            return originalSend.call(this, JSON.stringify(data));
        }
        return originalSend.call(this, data);
    };
    
    res.json = function(data) {
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        return originalJson.call(this, data);
    };
    
    next();
});



// Servir les fichiers upload√©s
app.use('/uploads', express.static('uploads', {
  setHeaders: (res, path) => {
    // Autoriser CORS pour les images
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
  }
}));
// Test de connexion √† la base de donn√©es
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('‚ùå Erreur de connexion √† PostgreSQL:', err);
  } else {
    console.log('‚úÖ Connexion √† PostgreSQL Neon r√©ussie');
    console.log('üìç Host:', process.env.DATABASE_URL ? process.env.DATABASE_URL.split('@')[1]?.split('/')[0] : 'localhost');
  }
});


// Middleware


// Servir les fichiers statiques du frontend
app.use(express.static(path.join(__dirname, '../depot')));

// Configuration multer pour l'upload de fichiers
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = 'uploads/';
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|pdf/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Seuls les fichiers JPEG, PNG et PDF sont autoris√©s'));
    }
  }
});

// Fonction optimis√©e pour g√©n√©rer des num√©ros uniques √† 6 chiffres
async function generateUniqueSixDigitNumber(table, column) {
  let attempts = 0;
  const maxAttempts = 10;
  
  while (attempts < maxAttempts) {
    const number = Math.floor(100000 + Math.random() * 900000);
    const fullNumber = 'UDH' + number;
    
    // V√©rifier si le num√©ro existe d√©j√†
    const result = await pool.query(
      `SELECT COUNT(*) FROM ${table} WHERE ${column} = $1`,
      [fullNumber]
    );
    
    if (parseInt(result.rows[0].count) === 0) {
      return fullNumber;
    }
    
    attempts++;
  }
  
  // Si on n'a pas trouv√© de num√©ro unique apr√®s plusieurs tentatives
  throw new Error('Impossible de g√©n√©rer un num√©ro unique');
}

// Middleware d'authentification
const authenticateToken = async (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  console.log('üîê V√©rification token:', token ? 'Pr√©sent' : 'Absent');

  if (!token) {
    console.log('‚ùå Token manquant');
    return res.status(401).json({ error: 'Token d\'acc√®s requis' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'votre_secret_jwt');
    console.log('üîì Token d√©cod√©:', decoded);
    
    const result = await pool.query('SELECT * FROM users WHERE id = $1', [decoded.userId]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå Utilisateur non trouv√© pour token');
      return res.status(403).json({ error: 'Token invalide' });
    }
    
    req.user = result.rows[0];
    console.log('‚úÖ Utilisateur authentifi√©:', req.user.email);
    next();
  } catch (error) {
    console.error('‚ùå Erreur v√©rification token:', error);
    return res.status(403).json({ error: 'Token invalide' });
  }
};

// Middleware pour v√©rifier les droits admin
const requireAdmin = (req, res, next) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ error: 'Droits administrateur requis' });
  }
  next();
};
app.use('/api/admin/stats', (req, res, next) => {
    console.log(`üìä [STATS] ${req.method} ${req.path}`);
    console.log('üîê Auth header:', req.headers.authorization ? 'PR√âSENT' : 'ABSENT');
    console.log('üìã User:', req.user ? `${req.user.email} (${req.user.role})` : 'NON AUTHENTIFI√â');
    
    // Forcer le Content-Type JSON
    res.setHeader('Content-Type', 'application/json');
    next();
});
// Routes d'authentification

// Inscription
app.post('/api/register', async (req, res) => {
  try {
    const { nom, email, telephone, motDePasse, dateNaissance } = req.body;

    // V√©rifier si l'utilisateur existe d√©j√† 
    const existingUser = await pool.query(
      'SELECT * FROM users WHERE email = $1 OR telephone = $2',
      [email, telephone]
    );

    if (existingUser.rows.length > 0) {
      return res.status(400).json({ error: 'Un utilisateur avec cet email ou t√©l√©phone existe d√©j√†' });
    }

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(motDePasse, 10);

    // Ins√©rer le nouvel utilisateur
    const result = await pool.query(
      'INSERT INTO users (nom, email, telephone, mot_de_passe, date_naissance, role, created_at) VALUES ($1, $2, $3, $4, $5, $6, NOW()) RETURNING *',
      [nom, email, telephone, hashedPassword, dateNaissance, 'user']
    );

    const user = result.rows[0];
    delete user.mot_de_passe; // Ne pas retourner le mot de passe

    res.status(201).json({ message: 'Compte cr√©√© avec succ√®s', user });
  } catch (error) {
    console.error('Erreur inscription:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Connexion
app.post('/api/login', async (req, res) => {
  try {
    const { identifiant, motDePasse } = req.body;

    // Rechercher l'utilisateur
    const result = await pool.query(
      'SELECT * FROM users WHERE email = $1 OR telephone = $1',
      [identifiant]
    );

    if (result.rows.length === 0) {
      return res.status(401).json({ error: 'Identifiants incorrects' });
    }

    const user = result.rows[0];

    // V√©rifier le mot de passe
    const validPassword = await bcrypt.compare(motDePasse, user.mot_de_passe);
    if (!validPassword) {
      return res.status(401).json({ error: 'Identifiants incorrects' });
    }

    // G√©n√©rer le token JWT
    const token = jwt.sign(
      { userId: user.id, role: user.role },
      process.env.JWT_SECRET || 'votre_secret_jwt',
      { expiresIn: '24h' }
    );

    delete user.mot_de_passe; // Ne pas retourner le mot de passe

    res.json({ message: 'Connexion r√©ussie', token, user });
  } catch (error) {
    console.error('Erreur connexion:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});



// Soumettre un dossier
app.post('/api/applications', authenticateToken, upload.fields([
  { name: 'photoIdentite', maxCount: 1 },
  { name: 'pieceIdentite', maxCount: 1 },
  { name: 'diplomeBac', maxCount: 1 },
  { name: 'releve', maxCount: 1 },
  { name: 'certificatNationalite', maxCount: 1 }
]), async (req, res) => {
  try {
    console.log('üîÑ D√©but soumission dossier');
    console.log('User ID:', req.user?.id);
    console.log('Body fields:', Object.keys(req.body));
    console.log('Files:', Object.keys(req.files || {}));
    
    const {
      nom, prenom, dateNaissance, lieuNaissance, nationalite, genre,
      adresse, telephone, email, typeBac, lieuObtention, anneeObtention,
      mention, premierChoix, deuxiemeChoix, troisiemeChoix
    } = req.body;

    // Validation des champs obligatoires
    const requiredFields = {
      nom, prenom, dateNaissance, lieuNaissance, nationalite, genre,
      adresse, telephone, email, typeBac, lieuObtention, anneeObtention,
      mention, premierChoix, deuxiemeChoix, troisiemeChoix
    };

    const missingFields = Object.entries(requiredFields)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingFields.length > 0) {
      console.error('Champs manquants:', missingFields);
      return res.status(400).json({ 
        error: `Champs obligatoires manquants: ${missingFields.join(', ')}` 
      });
    }

    // G√©n√©rer un num√©ro de dossier unique
    const numeroDossier = await generateUniqueSixDigitNumber('applications', 'numero_dossier');

    // Pr√©parer les chemins des fichiers
    const documents = {};
    if (req.files) {
      Object.keys(req.files).forEach(key => {
        documents[key] = req.files[key][0].filename;
      });
    }

    console.log('Documents upload√©s:', documents);

    // Ins√©rer le dossier
    const result = await pool.query(
      `INSERT INTO applications (
        user_id, numero_dossier, nom, prenom, date_naissance, lieu_naissance,
        nationalite, genre, adresse, telephone, email, type_bac, lieu_obtention,
        annee_obtention, mention, premier_choix, deuxieme_choix, troisieme_choix,
        documents, statut, created_at
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, NOW()) RETURNING *`,
      [
        req.user.id, numeroDossier, nom, prenom, dateNaissance, lieuNaissance,
        nationalite, genre, adresse, telephone, email, typeBac, lieuObtention,
        anneeObtention, mention, premierChoix, deuxiemeChoix, troisiemeChoix,
        JSON.stringify(documents), 'en-attente'
      ]
    );

    console.log('‚úÖ Dossier ins√©r√© avec succ√®s:', result.rows[0].id);

    res.status(201).json({
      message: 'Dossier soumis avec succ√®s',
      application: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå Erreur soumission dossier:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({ 
      error: 'Erreur serveur lors de la soumission',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

app.get('/api/applications/my', authenticateToken, async (req, res) => {
    try {
        console.log('üìã R√©cup√©ration dossiers pour user:', req.user.id);
        
        const result = await pool.query(
            'SELECT * FROM applications WHERE user_id = $1 ORDER BY created_at DESC',
            [req.user.id]
        );
        
        console.log('üìä Nombre de dossiers trouv√©s:', result.rows.length);
        
        res.json({ applications: result.rows });
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration dossiers:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// R√©cup√©rer les dossiers de l'utilisateur


// R√©cup√©rer tous les utilisateurs (Admin)
app.get('/api/admin/users', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(
      'SELECT id, nom, email, telephone, role, created_at FROM users ORDER BY created_at DESC'
    );

    res.json({ users: result.rows }); // Retourner avec la cl√© 'users'
  } catch (error) {
    console.error('Erreur r√©cup√©ration utilisateurs:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// R√©cup√©rer tous les dossiers (Admin)
app.get('/api/admin/applications', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { statut, filiere } = req.query;
    
    let query = `
      SELECT a.*, u.nom as user_nom, u.email as user_email
      FROM applications a
      JOIN users u ON a.user_id = u.id
    `;
    
    const params = [];
    const conditions = [];
    
    if (statut) {
      conditions.push(`a.statut = $${params.length + 1}`);
      params.push(statut);
    }
    
    if (filiere) {
      conditions.push(`a.premier_choix = $${params.length + 1}`);
      params.push(filiere);
    }
    
    if (conditions.length > 0) {
      query += ' WHERE ' + conditions.join(' AND ');
    }
    
    query += ' ORDER BY a.created_at DESC';
    
    const result = await pool.query(query, params);
    res.json({ applications: result.rows }); // Retourner avec la cl√© 'applications'
  } catch (error) {
    console.error('Erreur r√©cup√©ration dossiers admin:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Route pour r√©cup√©rer un dossier sp√©cifique (admin - avec toutes les donn√©es)
app.get('/api/admin/applications/:id/quitus', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    
    const result = await pool.query(
      `SELECT a.*, u.nom as user_nom, u.email as user_email 
       FROM applications a 
       JOIN users u ON a.user_id = u.id 
       WHERE a.id = $1`,
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Dossier non trouv√©' });
    }

    res.json({ application: result.rows[0] });
  } catch (error) {
    console.error('Erreur r√©cup√©ration dossier admin:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Route pour t√©l√©charger les documents (acc√®s public aux fichiers)
app.get('/api/applications/:id/documents/:documentType', authenticateToken, async (req, res) => {
    try {
        const { id, documentType } = req.params;
        
        console.log('üì• Demande de t√©l√©chargement:', { id, documentType });
        
        // R√©cup√©rer l'application pour obtenir le nom du fichier
        const result = await pool.query(
            'SELECT * FROM applications WHERE id = $1',
            [id]
        );

        if (result.rows.length === 0) {
            console.log('‚ùå Dossier non trouv√©');
            return res.status(404).json({ error: 'Dossier non trouv√©' });
        }

        const application = result.rows[0];
        
        // V√©rifier les droits d'acc√®s
        if (req.user.role !== 'admin' && application.user_id !== req.user.id) {
            console.log('‚ùå Acc√®s non autoris√©');
            return res.status(403).json({ error: 'Acc√®s non autoris√©' });
        }

        // R√©cup√©rer les documents
        let documents;
        try {
            documents = typeof application.documents === 'string' 
                ? JSON.parse(application.documents) 
                : application.documents || {};
        } catch (error) {
            console.error('‚ùå Erreur parsing documents:', error);
            documents = {};
        }

        console.log('üìã Documents disponibles:', documents);

        const filename = documents[documentType];
        if (!filename || filename === 'Non fourni' || filename === 'Optionnel') {
            console.log('‚ùå Document non disponible:', documentType);
            return res.status(404).json({ error: 'Document non trouv√©' });
        }

        const filePath = path.join(__dirname, 'uploads', filename);
        console.log('üìÅ Chemin du fichier:', filePath);

        // V√©rifier que le fichier existe
        if (!fs.existsSync(filePath)) {
            console.log('‚ùå Fichier physique non trouv√©');
            return res.status(404).json({ error: 'Fichier physique non trouv√© sur le serveur' });
        }

        // D√©finir le type MIME bas√© sur l'extension
        const ext = path.extname(filename).toLowerCase();
        let mimeType = 'application/octet-stream';
        
        switch(ext) {
            case '.pdf':
                mimeType = 'application/pdf';
                break;
            case '.jpg':
            case '.jpeg':
                mimeType = 'image/jpeg';
                break;
            case '.png':
                mimeType = 'image/png';
                break;
        }

        // D√©finir les en-t√™tes pour le t√©l√©chargement
        const documentNames = {
            'photoIdentite': 'Photo_identite',
            'pieceIdentite': 'Piece_identite',
            'diplomeBac': 'Diplome_bac', 
            'releve': 'Releve_notes',
            'certificatNationalite': 'Certificat_nationalite'
        };

        // Nettoyer les noms pour √©viter les probl√®mes de caract√®res
        const cleanNom = (application.nom || '').replace(/[^a-zA-Z0-9√©√®√™√†√¢√¥√∂√Ø√Æ√π√ª√ß]/g, '_').substring(0, 20);
        const cleanPrenom = (application.prenom || '').replace(/[^a-zA-Z0-9√©√®√™√†√¢√¥√∂√Ø√Æ√π√ª√ß]/g, '_').substring(0, 15);

        // Utiliser l'extension du fichier original stock√©
        const originalExt = path.extname(filename).toLowerCase();
        const downloadName = `${documentNames[documentType] || documentType}_${cleanNom}_${cleanPrenom}${originalExt}`;

        console.log('‚úÖ Nom de t√©l√©chargement final:', downloadName);

        res.setHeader('Content-Type', mimeType);
        res.setHeader('Content-Disposition', `attachment; filename="${downloadName}"`);
         
        // Envoyer le fichier
        res.sendFile(filePath, (err) => {
            if (err) {
                console.error('‚ùå Erreur envoi fichier:', err);
                res.status(500).json({ error: 'Erreur lors de l\'envoi du fichier' });
            } else {
                console.log('‚úÖ Fichier envoy√© avec succ√®s');
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur t√©l√©chargement document:', error);
        res.status(500).json({ error: 'Erreur serveur lors du t√©l√©chargement' });
    }
});

// Route pour r√©cup√©rer un dossier avec tous ses d√©tails (admin et propri√©taire)
app.get('/api/applications/:id/details', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    const result = await pool.query(
      `SELECT a.*, u.nom as user_nom, u.email as user_email 
       FROM applications a 
       JOIN users u ON a.user_id = u.id 
       WHERE a.id = $1`,
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Dossier non trouv√©' });
    }

    const application = result.rows[0];

    // V√©rifier les droits d'acc√®s
    if (req.user.role !== 'admin' && application.user_id !== req.user.id) {
      return res.status(403).json({ error: 'Acc√®s non autoris√©' });
    }

    // Ajouter des informations sur l'existence des fichiers
    try {
      const documents = typeof application.documents === 'string' 
        ? JSON.parse(application.documents) 
        : application.documents || {};
      
      const documentsStatus = {};
      Object.entries(documents).forEach(([key, filename]) => {
        if (filename && filename !== 'Non fourni' && filename !== 'Optionnel') {
          const filePath = path.join(__dirname, 'uploads', filename);
          documentsStatus[key] = {
            filename: filename,
            exists: fs.existsSync(filePath),
            size: fs.existsSync(filePath) ? fs.statSync(filePath).size : 0
          };
        } else {
          documentsStatus[key] = {
            filename: filename || 'Non fourni',
            exists: false,
            size: 0
          };
        }
      });

      application.documents_status = documentsStatus;
    } catch (error) {
      console.warn('Erreur v√©rification documents:', error);
      application.documents_status = {};
    }

    res.json({ application });

  } catch (error) {
    console.error('Erreur r√©cup√©ration d√©tails dossier:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Route pour g√©n√©rer et t√©l√©charger le quitus PDF
app.get('/api/applications/:id/quitus-pdf', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    const result = await pool.query(
      `SELECT a.*, u.nom as user_nom, u.email as user_email 
       FROM applications a 
       JOIN users u ON a.user_id = u.id 
       WHERE a.id = $1`,
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Dossier non trouv√©' });
    }

    const application = result.rows[0];

    // V√©rifier les droits d'acc√®s
    if (req.user.role !== 'admin' && application.user_id !== req.user.id) {
      return res.status(403).json({ error: 'Acc√®s non autoris√©' });
    }

    // Pour cette impl√©mentation, on retourne juste les donn√©es
    // Le PDF sera g√©n√©r√© c√¥t√© client
    res.json({ application });

  } catch (error) {
    console.error('Erreur g√©n√©ration quitus:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Route pour t√©l√©charger tous les documents d'un dossier en ZIP (bonus)
app.get('/api/applications/:id/documents/zip', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    // V√©rifier les droits admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({ error: 'Droits administrateur requis' });
    }

    const result = await pool.query(
      `SELECT a.*, u.nom as user_nom, u.email as user_email 
       FROM applications a 
       JOIN users u ON a.user_id = u.id 
       WHERE a.id = $1`,
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Dossier non trouv√©' });
    }

    const application = result.rows[0];
    const documents = typeof application.documents === 'string' 
      ? JSON.parse(application.documents) 
      : application.documents || {};

    // V√©rifier qu'il y a au moins un document
    const validDocuments = Object.entries(documents).filter(([key, filename]) => 
      filename && filename !== 'Non fourni' && filename !== 'Optionnel'
    );

    if (validDocuments.length === 0) {
      return res.status(404).json({ error: 'Aucun document √† t√©l√©charger' });
    }

    // Import archiver pour cr√©er le ZIP
    const archiver = require('archiver');
    
    // Cr√©er l'archive ZIP
    const archive = archiver('zip', {
      zlib: { level: 9 } // Niveau de compression
    });

    const zipName = `Dossier_${application.numero_dossier}_${application.nom}_${application.prenom}.zip`;

    res.setHeader('Content-Type', 'application/zip');
    res.setHeader('Content-Disposition', `attachment; filename="${zipName}"`);

    // Pipe l'archive vers la response
    archive.pipe(res);

    // Ajouter les fichiers √† l'archive
    const documentNames = {
      'photoIdentite': 'Photo_identite',
      'pieceIdentite': 'Piece_identite', 
      'diplomeBac': 'Diplome_bac',
      'releve': 'Releve_notes',
      'certificatNationalite': 'Certificat_nationalite'
    };

    validDocuments.forEach(([key, filename]) => {
      const filePath = path.join(__dirname, 'uploads', filename);
      if (fs.existsSync(filePath)) {
        const ext = path.extname(filename);
        const archiveName = `${documentNames[key] || key}${ext}`;
        archive.file(filePath, { name: archiveName });
      }
    });

    // Finaliser l'archive
    archive.finalize();

    console.log(`üì¶ Archive t√©l√©charg√©e: ${zipName} par ${req.user.email}`);

  } catch (error) {
    console.error('Erreur cr√©ation archive:', error);
    res.status(500).json({ error: 'Erreur serveur lors de la cr√©ation de l\'archive' });
  }
});

// Middleware pour servir les images avec les bons headers CORS
app.use('/uploads', (req, res, next) => {
  res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
  res.setHeader('Access-Control-Allow-Origin', '*');
  next();
}, express.static('uploads'));

// Route pour obtenir les statistiques des documents manquants (admin)
app.get('/api/admin/documents/stats', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        id, 
        numero_dossier, 
        nom, 
        prenom, 
        documents,
        created_at
      FROM applications 
      ORDER BY created_at DESC
    `);

    const stats = {
      total: result.rows.length,
      withMissingDocuments: 0,
      documentsStats: {
        photoIdentite: { present: 0, missing: 0 },
        pieceIdentite: { present: 0, missing: 0 },
        diplomeBac: { present: 0, missing: 0 },
        releve: { present: 0, missing: 0 },
        certificatNationalite: { present: 0, missing: 0 }
      }
    };

    result.rows.forEach(app => {
      try {
        const documents = typeof app.documents === 'string' 
          ? JSON.parse(app.documents) 
          : app.documents || {};

        let hasMissingDocs = false;

        Object.keys(stats.documentsStats).forEach(docType => {
          const filename = documents[docType];
          if (filename && filename !== 'Non fourni' && filename !== 'Optionnel') {
            // V√©rifier si le fichier existe physiquement
            const filePath = path.join(__dirname, 'uploads', filename);
            if (fs.existsSync(filePath)) {
              stats.documentsStats[docType].present++;
            } else {
              stats.documentsStats[docType].missing++;
              hasMissingDocs = true;
            }
          } else {
            stats.documentsStats[docType].missing++;
            if (docType !== 'certificatNationalite') { // Le certificat de nationalit√© est optionnel
              hasMissingDocs = true;
            }
          }
        });

        if (hasMissingDocs) {
          stats.withMissingDocuments++;
        }

      } catch (error) {
        console.warn(`Erreur parsing documents pour le dossier ${app.id}:`, error);
        stats.withMissingDocuments++;
      }
    });

    res.json(stats);

  } catch (error) {
    console.error('Erreur statistiques documents:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

app.put('/api/admin/applications/:id/status', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { statut } = req.body;

    if (!['en-attente', 'approuve', 'rejete'].includes(statut)) {
      return res.status(400).json({ error: 'Statut invalide' });
    }

    // G√©n√©rer un num√©ro de d√©p√¥t seulement si le dossier est approuv√©
    let numeroDepot = null;
    if (statut === 'approuve') {
  numeroDepot = await generateUniqueSixDigitNumber('applications', 'numero_depot');
}

    await pool.query(
      'UPDATE applications SET statut = $1, numero_depot = $2, updated_at = NOW() WHERE id = $3',
      [statut, numeroDepot, id]
    );

    // R√©cup√©rer le dossier mis √† jour pour retourner les informations
    const result = await pool.query('SELECT * FROM applications WHERE id = $1', [id]);
    
    res.json({ 
      message: 'Statut mis √† jour avec succ√®s', 
      application: result.rows[0] 
    });
  } catch (error) {
    console.error('Erreur mise √† jour statut:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Route de recherche de dossiers (Admin)
app.get('/api/admin/applications/search', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { q } = req.query;
    
    if (!q) {
      return res.status(400).json({ error: 'Terme de recherche requis' });
    }

    const result = await pool.query(`
      SELECT a.*, u.nom as user_nom, u.email as user_email
      FROM applications a
      JOIN users u ON a.user_id = u.id
      WHERE a.numero_dossier ILIKE $1 
         OR a.nom ILIKE $1 
         OR a.prenom ILIKE $1 
         OR a.email ILIKE $1
      ORDER BY a.created_at DESC
    `, [`%${q}%`]);

    res.json({ applications: result.rows });
  } catch (error) {
    console.error('Erreur recherche dossiers:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});


// Ajouter une route pour r√©cup√©rer un dossier sp√©cifique
app.get('/api/applications/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    const result = await pool.query(
      `SELECT a.*, u.nom as user_nom, u.email as user_email 
       FROM applications a 
       JOIN users u ON a.user_id = u.id 
       WHERE a.id = $1`,
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Dossier non trouv√©' });
    }

    // V√©rifier que l'utilisateur a le droit de voir ce dossier
    if (req.user.role !== 'admin' && result.rows[0].user_id !== req.user.id) {
      return res.status(403).json({ error: 'Acc√®s non autoris√©' });
    }

    res.json({ application: result.rows[0] });
  } catch (error) {
    console.error('Erreur r√©cup√©ration dossier:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Ajouter un utilisateur (Admin)
app.post('/api/admin/users', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { nom, email, telephone, role, motDePasse } = req.body;

    // V√©rifier si l'utilisateur existe d√©j√† 
    const existingUser = await pool.query(
      'SELECT * FROM users WHERE email = $1 OR telephone = $2',
      [email, telephone]
    );

    if (existingUser.rows.length > 0) {
      return res.status(400).json({ error: 'Un utilisateur avec cet email ou t√©l√©phone existe d√©j√†' });
    }

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(motDePasse, 10);

    // Ins√©rer le nouvel utilisateur
    const result = await pool.query(
      'INSERT INTO users (nom, email, telephone, mot_de_passe, role, created_at) VALUES ($1, $2, $3, $4, $5, NOW()) RETURNING *',
      [nom, email, telephone, hashedPassword, role]
    );

    const user = result.rows[0];
    delete user.mot_de_passe;

    res.status(201).json({ message: 'Utilisateur ajout√© avec succ√®s', user });
  } catch (error) {
    console.error('Erreur ajout utilisateur:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Statistiques (Admin)
app.get('/api/admin/stats', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const stats = {};

    // Total utilisateurs
    const userCount = await pool.query('SELECT COUNT(*) FROM users WHERE role = $1', ['user']);
    stats.totalUsers = parseInt(userCount.rows[0].count);

    // Total dossiers
    const appCount = await pool.query('SELECT COUNT(*) FROM applications');
    stats.totalApplications = parseInt(appCount.rows[0].count);

    // Dossiers approuv√©s
    const approvedCount = await pool.query('SELECT COUNT(*) FROM applications WHERE statut = $1', ['approuve']);
    stats.approvedApplications = parseInt(approvedCount.rows[0].count);

    // Dossiers en attente
    const pendingCount = await pool.query('SELECT COUNT(*) FROM applications WHERE statut = $1', ['en-attente']);
    stats.pendingApplications = parseInt(pendingCount.rows[0].count);

    console.log('üìä Statistiques calcul√©es:', stats);

    res.json({ stats });
  } catch (error) {
    console.error('Erreur r√©cup√©ration statistiques:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Routes utilisateur
app.get('/api/profile', authenticateToken, async (req, res) => {
  try {
    const user = { ...req.user };
    delete user.mot_de_passe; // Ne pas retourner le mot de passe
    
    res.json({ user });
  } catch (error) {
    console.error('Erreur r√©cup√©ration profil:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});
// Mettre √† jour le profil
app.put('/api/profile', authenticateToken, async (req, res) => {
  try {
    const { nom, email, telephone } = req.body;

    // V√©rifier que l'email/t√©l√©phone n'est pas d√©j√† utilis√© par un autre utilisateur
    const existingUser = await pool.query(
      'SELECT * FROM users WHERE (email = $1 OR telephone = $2) AND id != $3',
      [email, telephone, req.user.id]
    );

    if (existingUser.rows.length > 0) {
      return res.status(400).json({ error: 'Cet email ou t√©l√©phone est d√©j√† utilis√©' });
    }

    await pool.query(
      'UPDATE users SET nom = $1, email = $2, telephone = $3, updated_at = NOW() WHERE id = $4',
      [nom, email, telephone, req.user.id]
    );

    res.json({ message: 'Profil mis √† jour avec succ√®s' });
  } catch (error) {
    console.error('Erreur mise √† jour profil:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// =================== ROUTES POUR LES FACULT√âS ===================

// R√©cup√©rer toutes les facult√©s
app.get('/api/admin/facultes', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT f.*, 
             COUNT(fil.id) as nombre_filieres
      FROM facultes f
      LEFT JOIN filieres fil ON f.id = fil.faculte_id AND fil.active = true
      WHERE f.active = true
      GROUP BY f.id
      ORDER BY f.nom
    `);
    
    res.json({ facultes: result.rows });
  } catch (error) {
    console.error('Erreur r√©cup√©ration facult√©s:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Cr√©er une nouvelle facult√©
app.post('/api/admin/facultes', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { nom, libelle, description } = req.body;
    
    if (!nom || !libelle) {
      return res.status(400).json({ error: 'Le nom et le libell√© sont requis' });
    }
    
    const result = await pool.query(
      'INSERT INTO facultes (nom, libelle, description) VALUES ($1, $2, $3) RETURNING *',
      [nom.toUpperCase().trim(), libelle.trim(), description?.trim() || null]
    );
    
    res.status(201).json({ 
      message: 'Facult√© cr√©√©e avec succ√®s', 
      faculte: result.rows[0] 
    });
  } catch (error) {
    if (error.code === '23505') { // Contrainte unique
      res.status(400).json({ error: 'Une facult√© avec ce nom existe d√©j√†' });
    } else {
      console.error('Erreur cr√©ation facult√©:', error);
      res.status(500).json({ error: 'Erreur serveur' });
    }
  }
});

// Modifier une facult√©
app.put('/api/admin/facultes/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { nom, libelle, description, active } = req.body;
    
    const result = await pool.query(
      `UPDATE facultes 
       SET nom = $1, libelle = $2, description = $3, active = $4, updated_at = NOW()
       WHERE id = $5 
       RETURNING *`,
      [nom.toUpperCase().trim(), libelle.trim(), description?.trim() || null, active, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Facult√© non trouv√©e' });
    }
    
    res.json({ message: 'Facult√© mise √† jour avec succ√®s', faculte: result.rows[0] });
  } catch (error) {
    console.error('Erreur modification facult√©:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Supprimer une facult√© (soft delete)
app.delete('/api/admin/facultes/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    
    // V√©rifier s'il y a des fili√®res li√©es
    const filiereCheck = await pool.query(
      'SELECT COUNT(*) FROM filieres WHERE faculte_id = $1 AND active = true',
      [id]
    );
    
    if (parseInt(filiereCheck.rows[0].count) > 0) {
      return res.status(400).json({ 
        error: 'Impossible de supprimer cette facult√© car elle contient des fili√®res actives' 
      });
    }
    
    const result = await pool.query(
      'UPDATE facultes SET active = false, updated_at = NOW() WHERE id = $1 RETURNING *',
      [id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Facult√© non trouv√©e' });
    }
    
    res.json({ message: 'Facult√© supprim√©e avec succ√®s' });
  } catch (error) {
    console.error('Erreur suppression facult√©:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// =================== ROUTES POUR LES TYPES DE BAC ===================

// R√©cup√©rer tous les types de bac
// R√©cup√©rer tous les types de bac (Admin) - CORRECTION
app.get('/api/admin/type-bacs', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT tb.*, 
             COUNT(ftb.filiere_id) as nombre_filieres
      FROM type_bacs tb
      LEFT JOIN filiere_type_bacs ftb ON tb.id = ftb.type_bac_id
      LEFT JOIN filieres f ON ftb.filiere_id = f.id AND f.active = true
      WHERE tb.active = true
      GROUP BY tb.id
      ORDER BY tb.nom
    `);
    
    res.json({ typeBacs: result.rows });
  } catch (error) {
    console.error('Erreur r√©cup√©ration types de bac:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Cr√©er un nouveau type de bac
app.post('/api/admin/type-bacs', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { nom, libelle, description } = req.body;
    
    if (!nom || !libelle) {
      return res.status(400).json({ error: 'Le nom et le libell√© sont requis' });
    }
    
    const result = await pool.query(
      'INSERT INTO type_bacs (nom, libelle, description) VALUES ($1, $2, $3) RETURNING *',
      [nom.toUpperCase().trim(), libelle.trim(), description?.trim() || null]
    );
    
    res.status(201).json({ 
      message: 'Type de bac cr√©√© avec succ√®s', 
      typeBac: result.rows[0] 
    });
  } catch (error) {
    if (error.code === '23505') {
      res.status(400).json({ error: 'Un type de bac avec ce nom existe d√©j√†' });
    } else {
      console.error('Erreur cr√©ation type de bac:', error);
      res.status(500).json({ error: 'Erreur serveur' });
    }
  }
});

// Modifier un type de bac
app.put('/api/admin/type-bacs/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { nom, libelle, description, active } = req.body;
    
    const result = await pool.query(
      `UPDATE type_bacs 
       SET nom = $1, libelle = $2, description = $3, active = $4, updated_at = NOW()
       WHERE id = $5 
       RETURNING *`,
      [nom.toUpperCase().trim(), libelle.trim(), description?.trim() || null, active, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Type de bac non trouv√©' });
    }
    
    res.json({ message: 'Type de bac mis √† jour avec succ√®s', typeBac: result.rows[0] });
  } catch (error) {
    console.error('Erreur modification type de bac:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// =================== ROUTES POUR LES FILI√àRES ===================

// R√©cup√©rer toutes les fili√®res (Admin) - CORRECTION
app.get('/api/admin/filieres', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT f.*, 
             fac.nom as faculte_nom, 
             fac.libelle as faculte_libelle,
             COUNT(DISTINCT app.id) as nombre_candidatures,
             ARRAY_AGG(DISTINCT tb.nom) FILTER (WHERE tb.nom IS NOT NULL) as types_bac_autorises
      FROM filieres f
      JOIN facultes fac ON f.faculte_id = fac.id
      LEFT JOIN filiere_type_bacs ftb ON f.id = ftb.filiere_id
      LEFT JOIN type_bacs tb ON ftb.type_bac_id = tb.id AND tb.active = true
      LEFT JOIN applications app ON f.nom = app.premier_choix OR f.nom = app.deuxieme_choix OR f.nom = app.troisieme_choix
      WHERE f.active = true AND fac.active = true
      GROUP BY f.id, fac.nom, fac.libelle
      ORDER BY fac.nom, f.nom
    `);
    
    res.json({ filieres: result.rows });
  } catch (error) {
    console.error('Erreur r√©cup√©ration fili√®res:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});
// Cr√©er une nouvelle fili√®re
app.post('/api/admin/filieres', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { nom, libelle, description, faculte_id, capacite_max, types_bac_ids } = req.body;
    
    if (!nom || !libelle || !faculte_id) {
      return res.status(400).json({ error: 'Le nom, le libell√© et la facult√© sont requis' });
    }
    
    // Commencer une transaction
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      // Cr√©er la fili√®re
      const filiereResult = await client.query(
        `INSERT INTO filieres (nom, libelle, description, faculte_id, capacite_max) 
         VALUES ($1, $2, $3, $4, $5) RETURNING *`,
        [nom.toUpperCase().trim(), libelle.trim(), description?.trim() || null, faculte_id, capacite_max || null]
      );
      
      const filiere = filiereResult.rows[0];
      
      // Ajouter les types de bac autoris√©s
      if (types_bac_ids && types_bac_ids.length > 0) {
        for (const typeBacId of types_bac_ids) {
          await client.query(
            'INSERT INTO filiere_type_bacs (filiere_id, type_bac_id) VALUES ($1, $2)',
            [filiere.id, typeBacId]
          );
        }
      }
      
      await client.query('COMMIT');
      
      res.status(201).json({ 
        message: 'Fili√®re cr√©√©e avec succ√®s', 
        filiere 
      });
      
    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    } finally {
      client.release();
    }
    
  } catch (error) {
    if (error.code === '23505') {
      res.status(400).json({ error: 'Une fili√®re avec ce nom existe d√©j√† dans cette facult√©' });
    } else {
      console.error('Erreur cr√©ation fili√®re:', error);
      res.status(500).json({ error: 'Erreur serveur' });
    }
  }
});

// Modifier une fili√®re
app.put('/api/admin/filieres/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { nom, libelle, description, faculte_id, capacite_max, active, types_bac_ids } = req.body;
    
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      // Mettre √† jour la fili√®re
      const result = await client.query(
        `UPDATE filieres 
         SET nom = $1, libelle = $2, description = $3, faculte_id = $4, 
             capacite_max = $5, active = $6, updated_at = NOW()
         WHERE id = $7 
         RETURNING *`,
        [nom.toUpperCase().trim(), libelle.trim(), description?.trim() || null, 
         faculte_id, capacite_max || null, active, id]
      );
      
      if (result.rows.length === 0) {
        throw new Error('Fili√®re non trouv√©e');
      }
      
      // Mettre √† jour les types de bac autoris√©s
      if (types_bac_ids !== undefined) {
        // Supprimer les anciennes associations
        await client.query('DELETE FROM filiere_type_bacs WHERE filiere_id = $1', [id]);
        
        // Ajouter les nouvelles associations
        if (types_bac_ids.length > 0) {
          for (const typeBacId of types_bac_ids) {
            await client.query(
              'INSERT INTO filiere_type_bacs (filiere_id, type_bac_id) VALUES ($1, $2)',
              [id, typeBacId]
            );
          }
        }
      }
      
      await client.query('COMMIT');
      
      res.json({ message: 'Fili√®re mise √† jour avec succ√®s', filiere: result.rows[0] });
      
    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    } finally {
      client.release();
    }
    
  } catch (error) {
    console.error('Erreur modification fili√®re:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

app.get('/api/admin/diplomes', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT d.*,  
             fac.libelle as faculte_libelle,
             f.nom as filiere_nom,
             f.libelle as filiere_libelle
      FROM diplomes d
      JOIN facultes fac ON d.faculte_id = fac.id
      LEFT JOIN filieres f ON d.filiere_id = f.id
      WHERE d.active = true AND fac.active = true
      ORDER BY fac.nom, f.nom
    `);
    
    res.json({ diplomes: result.rows });
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration dipl√¥mes:', error);
    res.status(500).json({ 
      error: 'Erreur serveur',
      details: error.message 
    });
  }
});

// Cr√©er une nouvelle fili√®re
app.post('/api/admin/diplomes', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const {libelle, faculte_id, filiere_id } = req.body;
    
    if (!libelle || !faculte_id || !filiere_id) {
      return res.status(400).json({ 
        error: 'le libell√©, la facult√© et la fili√®re sont requis' 
      });
    }
    
    const result = await pool.query(
      `INSERT INTO diplomes (libelle, faculte_id, filiere_id) 
       VALUES ($1, $2, $3) RETURNING *`,
      [libelle.trim(), faculte_id, filiere_id]
    );
    
    res.status(201).json({ 
      message: 'Dipl√¥me cr√©√© avec succ√®s', 
      diplome: result.rows[0] 
    });
    
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation dipl√¥me:', error);
    res.status(500).json({ 
      error: 'Erreur serveur',
      details: error.message 
    });
  }
});

// Modifier une fili√®re
app.put('/api/admin/diplomes/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { nom, libelle, faculte_id, filiere_id, active } = req.body;
    
    const result = await pool.query(
      `UPDATE diplomes 
       SET libelle = $1, faculte_id = $2, filiere_id = $3, active = $4, updated_at = NOW()
       WHERE id = $5 
       RETURNING *`,
      [libelle.trim(), faculte_id, filiere_id, active !== false, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Dipl√¥me non trouv√©' });
    }
    
    res.json({ 
      message: 'Dipl√¥me mis √† jour avec succ√®s', 
      diplome: result.rows[0] 
    });
    
  } catch (error) {
    console.error('‚ùå Erreur modification dipl√¥me:', error);
    res.status(500).json({ 
      error: 'Erreur serveur',
      details: error.message 
    });
  }
});

app.delete('/api/admin/diplomes/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    
    const result = await pool.query(
      'UPDATE diplomes SET active = false, updated_at = NOW() WHERE id = $1 RETURNING *',
      [id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Dipl√¥me non trouv√©' });
    }
    
    res.json({ message: 'Dipl√¥me supprim√© avec succ√®s' });
    
  } catch (error) {
    console.error('‚ùå Erreur suppression dipl√¥me:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// =================== ROUTES PUBLIQUES POUR LES FORMULAIRES ===================

// R√©cup√©rer les facult√©s actives (pour les formulaires publics)
app.get('/api/facultes', async (req, res) => {
  try {
    const result = await pool.query(
      'SELECT id, nom, libelle FROM facultes WHERE active = true ORDER BY nom'
    );
    res.json({ facultes: result.rows });
  } catch (error) {
    console.error('Erreur r√©cup√©ration facult√©s publiques:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// R√©cup√©rer les types de bac actifs (route publique)
app.get('/api/type-bacs', async (req, res) => {
    try {
        console.log('üìö R√©cup√©ration des types de bac publics');
        
        const result = await pool.query(`
            SELECT tb.id, tb.nom, tb.libelle, tb.description,
                   COUNT(DISTINCT ftb.filiere_id) as nombre_filieres
            FROM type_bacs tb
            LEFT JOIN filiere_type_bacs ftb ON tb.id = ftb.type_bac_id
            LEFT JOIN filieres f ON ftb.filiere_id = f.id AND f.active = true
            WHERE tb.active = true
            GROUP BY tb.id, tb.nom, tb.libelle, tb.description
            ORDER BY tb.nom
        `);
        
        console.log(`‚úÖ ${result.rows.length} types de bac trouv√©s`);
        
        res.json({ 
            typeBacs: result.rows,
            message: `${result.rows.length} type(s) de bac disponible(s)`
        });
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration types de bac publics:', error);
        res.status(500).json({ 
            error: 'Erreur serveur lors de la r√©cup√©ration des types de bac'
        });
    }
});


// R√©cup√©rer les fili√®res actives avec filtrage optionnel par facult√© ou type de bac
app.get('/api/filieres', async (req, res) => {
    try {
        const { faculte_id, type_bac } = req.query;
        
        console.log('üìö R√©cup√©ration des fili√®res publiques', { faculte_id, type_bac });
        
        let query = `
            SELECT DISTINCT f.id, f.nom, f.libelle, f.capacite_max, f.description,
                   fac.nom as faculte_nom, fac.libelle as faculte_libelle,
                   COUNT(app.id) as nombre_candidatures
            FROM filieres f
            JOIN facultes fac ON f.faculte_id = fac.id
        `;
        
        const params = [];
        const conditions = ['f.active = true', 'fac.active = true'];
        
        if (faculte_id) {
            conditions.push(`f.faculte_id = $${params.length + 1}`);
            params.push(faculte_id);
        }
        
        if (type_bac) {
            query += ` JOIN filiere_type_bacs ftb ON f.id = ftb.filiere_id
                       JOIN type_bacs tb ON ftb.type_bac_id = tb.id`;
            conditions.push(`tb.nom = $${params.length + 1}`);
            conditions.push('tb.active = true');
            params.push(type_bac);
        }
        
        query += ` LEFT JOIN applications app ON (
                       f.nom = app.premier_choix OR 
                       f.nom = app.deuxieme_choix OR 
                       f.nom = app.troisieme_choix
                   )
                   WHERE ` + conditions.join(' AND ') + `
                   GROUP BY f.id, f.nom, f.libelle, f.capacite_max, f.description,
                            fac.nom, fac.libelle
                   ORDER BY fac.nom, f.nom`;
        
        const result = await pool.query(query, params);
        
        console.log(`‚úÖ ${result.rows.length} fili√®res trouv√©es`);
        
        res.json({ 
            filieres: result.rows,
            filters: { faculte_id, type_bac },
            count: result.rows.length
        });
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration fili√®res publiques:', error);
        res.status(500).json({ 
            error: 'Erreur serveur lors de la r√©cup√©ration des fili√®res'
        });
    }
});

app.get('/api/debug/type-bacs-filieres', async (req, res) => {
    try {
        // R√©cup√©rer tous les types de bac avec leurs fili√®res
        const result = await pool.query(`
            SELECT tb.nom as type_bac, tb.libelle as type_bac_libelle,
                   f.nom as filiere_nom, f.libelle as filiere_libelle,
                   fac.nom as faculte_nom
            FROM type_bacs tb
            LEFT JOIN filiere_type_bacs ftb ON tb.id = ftb.type_bac_id
            LEFT JOIN filieres f ON ftb.filiere_id = f.id AND f.active = true
            LEFT JOIN facultes fac ON f.faculte_id = fac.id AND fac.active = true
            WHERE tb.active = true
            ORDER BY tb.nom, fac.nom, f.nom
        `);
        
        // Organiser les donn√©es par type de bac
        const data = {};
        result.rows.forEach(row => {
            if (!data[row.type_bac]) {
                data[row.type_bac] = {
                    libelle: row.type_bac_libelle,
                    filieres: []
                };
            }
            if (row.filiere_nom) {
                data[row.type_bac].filieres.push({
                    nom: row.filiere_nom,
                    libelle: row.filiere_libelle,
                    faculte: row.faculte_nom
                });
            }
        });
        
        res.json({ debug_data: data });
        
    } catch (error) {
        console.error('‚ùå Erreur debug:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

app.get('/api/filieres-by-bac/:typeBac', async (req, res) => {
    try {
        const { typeBac } = req.params;
        
        console.log(`üîç Recherche fili√®res pour type de bac: ${typeBac}`);
        
        const result = await pool.query(`
            SELECT DISTINCT f.id, f.nom, f.libelle, f.description, f.capacite_max,
                   fac.nom as faculte_nom, fac.libelle as faculte_libelle,
                   COUNT(app.id) as nombre_candidatures
            FROM filieres f
            JOIN facultes fac ON f.faculte_id = fac.id
            JOIN filiere_type_bacs ftb ON f.id = ftb.filiere_id
            JOIN type_bacs tb ON ftb.type_bac_id = tb.id
            LEFT JOIN applications app ON (
                f.nom = app.premier_choix OR 
                f.nom = app.deuxieme_choix OR 
                f.nom = app.troisieme_choix
            )
            WHERE f.active = true 
                AND fac.active = true 
                AND tb.active = true
                AND tb.nom = $1
            GROUP BY f.id, f.nom, f.libelle, f.description, f.capacite_max, 
                     fac.nom, fac.libelle
            ORDER BY fac.nom, f.nom
        `, [typeBac]);
        
        console.log(`‚úÖ ${result.rows.length} fili√®res trouv√©es pour ${typeBac}`);
        
        res.json({ 
            filieres: result.rows,
            message: `${result.rows.length} fili√®re(s) trouv√©e(s) pour le ${typeBac}`
        });
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration fili√®res par bac:', error);
        res.status(500).json({ 
            error: 'Erreur serveur lors de la r√©cup√©ration des fili√®res',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});
// 2. Route pour r√©cup√©rer les statistiques des fili√®res par type de bac (optionnel)
app.get('/api/admin/stats/filieres-by-bac', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT tb.nom as type_bac, tb.libelle as type_bac_libelle,
                   COUNT(DISTINCT f.id) as nombre_filieres,
                   COUNT(DISTINCT app.id) as nombre_candidatures,
                   COUNT(DISTINCT CASE WHEN app.statut = 'approuve' THEN app.id END) as candidatures_approuvees
            FROM type_bacs tb
            LEFT JOIN filiere_type_bacs ftb ON tb.id = ftb.type_bac_id
            LEFT JOIN filieres f ON ftb.filiere_id = f.id AND f.active = true
            LEFT JOIN applications app ON (
                f.nom = app.premier_choix OR 
                f.nom = app.deuxieme_choix OR 
                f.nom = app.troisieme_choix
            )
            WHERE tb.active = true
            GROUP BY tb.id, tb.nom, tb.libelle
            ORDER BY tb.nom
        `);
        
        res.json({ stats: result.rows });
    } catch (error) {
        console.error('Erreur statistiques fili√®res par bac:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});


// =================== STATISTIQUES AVANC√âES ===================

// Statistiques d√©taill√©es par facult√©
app.get('/api/admin/stats/facultes', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT f.nom, f.libelle,
             COUNT(DISTINCT fil.id) as nombre_filieres,
             COUNT(DISTINCT CASE 
               WHEN app.premier_choix = fil.nom OR 
                    app.deuxieme_choix = fil.nom OR 
                    app.troisieme_choix = fil.nom 
               THEN app.id END) as nombre_candidatures,
             COUNT(DISTINCT CASE 
               WHEN (app.premier_choix = fil.nom OR 
                     app.deuxieme_choix = fil.nom OR 
                     app.troisieme_choix = fil.nom) 
                    AND app.statut = 'approuve'
               THEN app.id END) as candidatures_approuvees
      FROM facultes f
      LEFT JOIN filieres fil ON f.id = fil.faculte_id AND fil.active = true
      LEFT JOIN applications app ON (fil.nom = app.premier_choix OR 
                                   fil.nom = app.deuxieme_choix OR 
                                   fil.nom = app.troisieme_choix)
      WHERE f.active = true
      GROUP BY f.id, f.nom, f.libelle
      ORDER BY f.nom
    `);
    
    res.json({ stats: result.rows });
  } catch (error) {
    console.error('Erreur statistiques facult√©s:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// 3. Route pour r√©cup√©rer les informations d√©taill√©es d'une fili√®re
app.get('/api/filieres/:id/details', async (req, res) => {
    try {
        const { id } = req.params;
        
        const result = await pool.query(`
            SELECT f.*, fac.nom as faculte_nom, fac.libelle as faculte_libelle,
                   COUNT(DISTINCT app.id) as nombre_candidatures,
                   COUNT(DISTINCT CASE WHEN app.statut = 'approuve' THEN app.id END) as candidatures_approuvees,
                   ARRAY_AGG(DISTINCT tb.nom) FILTER (WHERE tb.nom IS NOT NULL) as types_bac_autorises,
                   ARRAY_AGG(DISTINCT tb.libelle) FILTER (WHERE tb.libelle IS NOT NULL) as types_bac_libelles
            FROM filieres f
            JOIN facultes fac ON f.faculte_id = fac.id
            LEFT JOIN filiere_type_bacs ftb ON f.id = ftb.filiere_id
            LEFT JOIN type_bacs tb ON ftb.type_bac_id = tb.id AND tb.active = true
            LEFT JOIN applications app ON (
                f.nom = app.premier_choix OR 
                f.nom = app.deuxieme_choix OR 
                f.nom = app.troisieme_choix
            )
            WHERE f.id = $1 AND f.active = true
            GROUP BY f.id, fac.nom, fac.libelle
        `, [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Fili√®re non trouv√©e' });
        }
        
        res.json({ filiere: result.rows[0] });
    } catch (error) {
        console.error('Erreur r√©cup√©ration d√©tails fili√®re:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});
// 4. Route pour v√©rifier la disponibilit√© d'une fili√®re
app.get('/api/filieres/:nom/availability', async (req, res) => {
    try {
        const { nom } = req.params;
        
        const result = await pool.query(`
            SELECT f.capacite_max,
                   COUNT(DISTINCT CASE WHEN app.statut = 'approuve' THEN app.id END) as places_prises,
                   (f.capacite_max - COUNT(DISTINCT CASE WHEN app.statut = 'approuve' THEN app.id END)) as places_disponibles,
                   CASE 
                       WHEN f.capacite_max IS NULL THEN true
                       WHEN f.capacite_max > COUNT(DISTINCT CASE WHEN app.statut = 'approuve' THEN app.id END) THEN true
                       ELSE false
                   END as places_disponibles_bool
            FROM filieres f
            LEFT JOIN applications app ON (
                f.nom = app.premier_choix OR 
                f.nom = app.deuxieme_choix OR 
                f.nom = app.troisieme_choix
            )
            WHERE f.nom ILIKE $1 AND f.active = true
            GROUP BY f.id, f.capacite_max
        `, [nom]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Fili√®re non trouv√©e' });
        }
        
        const availability = result.rows[0];
        availability.message = availability.places_disponibles_bool ? 
            'Places disponibles' : 
            'Capacit√© maximale atteinte';
            
        res.json({ availability });
    } catch (error) {
        console.error('Erreur v√©rification disponibilit√© fili√®re:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// 5. Route pour r√©cup√©rer toutes les fili√®res avec leurs types de bac autoris√©s (pour l'admin)
app.get('/api/admin/filieres-complete', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT f.*, 
                   fac.nom as faculte_nom, 
                   fac.libelle as faculte_libelle,
                   COUNT(DISTINCT app.id) as nombre_candidatures,
                   COUNT(DISTINCT CASE WHEN app.statut = 'approuve' THEN app.id END) as candidatures_approuvees,
                   ARRAY_AGG(DISTINCT tb.nom ORDER BY tb.nom) FILTER (WHERE tb.nom IS NOT NULL) as types_bac_autorises,
                   ARRAY_AGG(DISTINCT JSONB_BUILD_OBJECT('id', tb.id, 'nom', tb.nom, 'libelle', tb.libelle)) FILTER (WHERE tb.id IS NOT NULL) as types_bac_details
            FROM filieres f
            JOIN facultes fac ON f.faculte_id = fac.id
            LEFT JOIN filiere_type_bacs ftb ON f.id = ftb.filiere_id
            LEFT JOIN type_bacs tb ON ftb.type_bac_id = tb.id AND tb.active = true
            LEFT JOIN applications app ON (
                f.nom = app.premier_choix OR 
                f.nom = app.deuxieme_choix OR 
                f.nom = app.troisieme_choix
            )
            WHERE f.active = true AND fac.active = true
            GROUP BY f.id, fac.nom, fac.libelle
            ORDER BY fac.nom, f.nom
        `);
        
        res.json({ filieres: result.rows });
    } catch (error) {
        console.error('Erreur r√©cup√©ration fili√®res compl√®tes:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// 6. Route pour mettre √† jour les types de bac d'une fili√®re
app.put('/api/admin/filieres/:id/types-bac', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { types_bac_ids } = req.body;
        
        if (!Array.isArray(types_bac_ids)) {
            return res.status(400).json({ error: 'types_bac_ids doit √™tre un tableau' });
        }
        
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // Supprimer les anciennes associations
            await client.query('DELETE FROM filiere_type_bacs WHERE filiere_id = $1', [id]);
            
            // Ajouter les nouvelles associations
            for (const typeBacId of types_bac_ids) {
                await client.query(
                    'INSERT INTO filiere_type_bacs (filiere_id, type_bac_id) VALUES ($1, $2)',
                    [id, typeBacId]
                );
            }
            
            await client.query('COMMIT');
            
            res.json({ message: 'Types de bac mis √† jour avec succ√®s' });
            
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
        
    } catch (error) {
        console.error('Erreur mise √† jour types de bac:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Changer le mot de passe
app.put('/api/change-password', authenticateToken, async (req, res) => {
  try {
    const { ancienMotDePasse, nouveauMotDePasse } = req.body;

    // R√©cup√©rer le mot de passe actuel
    const result = await pool.query('SELECT mot_de_passe FROM users WHERE id = $1', [req.user.id]);
    const currentPassword = result.rows[0].mot_de_passe;

    // V√©rifier l'ancien mot de passe
    const validPassword = await bcrypt.compare(ancienMotDePasse, currentPassword);
    if (!validPassword) {
      return res.status(400).json({ error: 'Ancien mot de passe incorrect' });
    }

    // Hasher le nouveau mot de passe
    const hashedNewPassword = await bcrypt.hash(nouveauMotDePasse, 10);

    // Mettre √† jour
    await pool.query(
      'UPDATE users SET mot_de_passe = $1, updated_at = NOW() WHERE id = $2',
      [hashedNewPassword, req.user.id]
    );

    res.json({ message: 'Mot de passe chang√© avec succ√®s' });
  } catch (error) {
    console.error('Erreur changement mot de passe:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Export des donn√©es (Admin)
app.get('/api/admin/export/:type', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { type } = req.params;

    if (type === 'users') {
      const result = await pool.query(
        'SELECT nom, email, telephone, role, created_at FROM users ORDER BY created_at DESC'
      );
      
      // Convertir en CSV
      const csv = [
        'Nom,Email,T√©l√©phone,R√¥le,Date d\'inscription',
        ...result.rows.map(row => 
          `"${row.nom}","${row.email}","${row.telephone}","${row.role}","${new Date(row.created_at).toLocaleDateString('fr-FR')}"`
        )
      ].join('\n');
      
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename=utilisateurs.csv');
      res.send(csv);
      
    } else if (type === 'applications') {
      const result = await pool.query(`
        SELECT a.numero_dossier, a.nom, a.prenom,a.date_naissance,a.lieu_naissance,a.lieu_obtention,a.nationalite,a.adresse, a.email, a.premier_choix,a.deuxieme_choix,a.troisieme_choix,
               a.type_bac, a.statut, a.created_at
        FROM applications a
        ORDER BY a.created_at DESC
      `);
      
      const csv = [
        'Num√©ro dossier,Nom,Pr√©nom,Date_Naiss,Lieu_Naiss,Lieu_Obtention,Adress,Nationalite,Email,Premier choix, Deuxieme choix, Troisieme Choix,Type Bac,Statut,Date de d√©p√¥t',
        ...result.rows.map(row => 
          `"${row.numero_dossier}","${row.nom}","${row.prenom}","${row.email}","${row.premier_choix}","${row.type_bac}","${row.statut}","${new Date(row.created_at).toLocaleDateString('fr-FR')}"`
        )
      ].join('\n');
      
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename=dossiers.csv');
      res.send(csv);
    } else {
      res.status(400).json({ error: 'Type d\'export invalide' });
    }
  } catch (error) {
    console.error('Erreur export:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Route catch-all pour le frontend SPA (doit √™tre √† la fin)


// Ajouter ces routes dans server.js apr√®s les routes existantes

// =================== NOUVELLES ROUTES STATISTIQUES AVEC GRAPHIQUES ===================

// Statistiques par genre
app.get('/api/admin/stats/genre', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üë´ R√©cup√©ration stats genre...');
    
    const result = await pool.query(`
      SELECT 
        genre,
        COUNT(*) as nombre,
        COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves,
        COUNT(CASE WHEN statut = 'rejete' THEN 1 END) as rejetes,
        COUNT(CASE WHEN statut = 'en-attente' THEN 1 END) as en_attente
      FROM applications 
      WHERE genre IS NOT NULL AND TRIM(genre) != ''
      GROUP BY genre 
      ORDER BY nombre DESC
    `);
    
    const response = {
      success: true,
      stats: result.rows.map(row => ({
        genre: row.genre,
        nombre: parseInt(row.nombre),
        approuves: parseInt(row.approuves),
        rejetes: parseInt(row.rejetes),
        en_attente: parseInt(row.en_attente)
      }))
    };
    
    console.log(`‚úÖ ${result.rows.length} stats genre r√©cup√©r√©es`);
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Erreur stats genre:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur serveur',
      details: error.message
    });
  }
});
// Statistiques par fili√®re
app.get('/api/admin/stats/filieres', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üìö R√©cup√©ration stats fili√®res...');
    
    const result = await pool.query(`
      SELECT 
        premier_choix as filiere,
        COUNT(*) as nombre,
        COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves
      FROM applications 
      WHERE premier_choix IS NOT NULL 
        AND TRIM(premier_choix) != ''
      GROUP BY premier_choix 
      ORDER BY nombre DESC 
      LIMIT 15
    `);
    
    const response = {
      success: true,
      stats: result.rows.map(row => ({
        filiere: row.filiere,
        nombre: parseInt(row.nombre),
        approuves: parseInt(row.approuves)
      }))
    };
    
    console.log(`‚úÖ ${result.rows.length} stats fili√®res r√©cup√©r√©es`);
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Erreur stats fili√®res:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur serveur',
      details: error.message
    });
  }
});


// Statistiques par type de bac
app.get('/api/admin/stats/type-bac', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üéì R√©cup√©ration stats type bac...');
    
    const result = await pool.query(`
      SELECT 
        type_bac,
        COUNT(*) as nombre,
        COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves
      FROM applications 
      WHERE type_bac IS NOT NULL 
        AND TRIM(type_bac) != ''
      GROUP BY type_bac 
      ORDER BY nombre DESC
    `);
    
    const response = {
      success: true,
      stats: result.rows.map(row => ({
        type_bac: row.type_bac,
        nombre: parseInt(row.nombre),
        approuves: parseInt(row.approuves)
      }))
    };
    
    console.log(`‚úÖ ${result.rows.length} stats type bac r√©cup√©r√©es`);
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Erreur stats type bac:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur serveur',
      details: error.message
    });
  }
});
app.get('/api/admin/stats/test-data', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üîç Test donn√©es statistiques...');
    
    // Compter total
    const countResult = await pool.query('SELECT COUNT(*) as total FROM applications');
    const totalApplications = parseInt(countResult.rows[0].total);
    
    console.log(`Total applications: ${totalApplications}`);
    
    if (totalApplications === 0) {
      return res.json({
        success: false,
        message: 'Aucun dossier trouv√© en base de donn√©es',
        total: 0,
        suggestions: [
          'V√©rifiez que des dossiers ont √©t√© soumis',
          'V√©rifiez la connexion √† la base de donn√©es',
          'Cr√©ez des donn√©es de test si n√©cessaire'
        ]
      });
    }
    
    // √âchantillon
    const sampleResult = await pool.query(`
      SELECT id, nom, prenom, genre, type_bac, premier_choix, statut, created_at 
      FROM applications 
      ORDER BY created_at DESC 
      LIMIT 5
    `);
    
    // R√©partitions
    const statusResult = await pool.query(`
      SELECT statut, COUNT(*) as count 
      FROM applications 
      GROUP BY statut
    `);
    
    const genderResult = await pool.query(`
      SELECT genre, COUNT(*) as count 
      FROM applications 
      WHERE genre IS NOT NULL
      GROUP BY genre
    `);
    
    const bacResult = await pool.query(`
      SELECT type_bac, COUNT(*) as count 
      FROM applications 
      WHERE type_bac IS NOT NULL AND type_bac != ''
      GROUP BY type_bac
    `);
    
    res.json({
      success: true,
      total_applications: totalApplications,
      sample_data: sampleResult.rows,
      distributions: {
        status: statusResult.rows,
        gender: genderResult.rows,
        bac_type: bacResult.rows
      },
      message: 'Donn√©es r√©cup√©r√©es avec succ√®s'
    });
    
  } catch (error) {
    console.error('‚ùå Erreur test donn√©es:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du test des donn√©es',
      details: error.message
    });
  }
});

// 5. ROUTE DE CR√âATION DE DONN√âES DE TEST
app.post('/api/admin/stats/create-test-data', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üß™ Cr√©ation donn√©es de test...');
    
    // V√©rifier si des donn√©es existent
    const existingCount = await pool.query('SELECT COUNT(*) FROM applications');
    if (parseInt(existingCount.rows[0].count) > 0) {
      return res.json({
        success: false,
        message: 'Des donn√©es existent d√©j√†. Supprimez-les d\'abord si n√©cessaire.',
        existing_count: parseInt(existingCount.rows[0].count)
      });
    }
    
    // Cr√©er un utilisateur de test si n√©cessaire
    let testUserId = 1;
    const userCheck = await pool.query('SELECT id FROM users LIMIT 1');
    if (userCheck.rows.length > 0) {
      testUserId = userCheck.rows[0].id;
    }
    
    // Donn√©es de test vari√©es
    const testData = [
      {
        nom: 'IBRAHIM', prenom: 'Aissatou', genre: 'feminin',
        type_bac: 'BAC A', premier_choix: 'FRANCAIS', statut: 'approuve'
      },
      {
        nom: 'MOUSSA', prenom: 'Abdoul', genre: 'masculin', 
        type_bac: 'BAC C', premier_choix: 'INFORMATIQUE', statut: 'en-attente'
      },
      {
        nom: 'HALIMA', prenom: 'Zeinabou', genre: 'feminin',
        type_bac: 'BAC D', premier_choix: 'MEDECINE', statut: 'approuve'
      },
      {
        nom: 'AHMED', prenom: 'Ousmane', genre: 'masculin',
        type_bac: 'BAC G', premier_choix: 'GESTION', statut: 'rejete'
      },
      {
        nom: 'FATIMA', prenom: 'Mariama', genre: 'feminin',
        type_bac: 'BAC C', premier_choix: 'MATHEMATIQUES', statut: 'approuve'
      },
      {
        nom: 'HASSAN', prenom: 'Boureima', genre: 'masculin',
        type_bac: 'BAC D', premier_choix: 'CHIMIE', statut: 'en-attente'
      },
      {
        nom: 'AMINA', prenom: 'Khadija', genre: 'feminin',
        type_bac: 'BAC A', premier_choix: 'HISTOIRE', statut: 'approuve'
      },
      {
        nom: 'IBRAHIM', prenom: 'Mahamadou', genre: 'masculin',
        type_bac: 'BAC C', premier_choix: 'PHYSIQUE', statut: 'en-attente'
      }
    ];
    
    let createdCount = 0;
    
    for (const data of testData) {
      try {
        const numeroUnique = await generateUniqueSixDigitNumber('applications', 'numero_dossier');
        
        await pool.query(`
          INSERT INTO applications (
            user_id, numero_dossier, nom, prenom, date_naissance, lieu_naissance,
            nationalite, genre, adresse, telephone, email, type_bac, lieu_obtention,
            annee_obtention, mention, premier_choix, deuxieme_choix, troisieme_choix,
            documents, statut, created_at
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, NOW())
        `, [
          testUserId,
          numeroUnique,
          data.nom,
          data.prenom,
          '2000-01-01', // date_naissance par d√©faut
          'Tahoua', // lieu_naissance par d√©faut
          'nigerienne', // nationalite par d√©faut
          data.genre,
          'Adresse test Tahoua', // adresse par d√©faut
          '+227123456789', // telephone par d√©faut
          `${data.prenom.toLowerCase()}.${data.nom.toLowerCase()}@test.com`, // email g√©n√©r√©
          data.type_bac,
          'Tahoua', // lieu_obtention par d√©faut
          '2024-2025', // annee_obtention par d√©faut
          'Passable', // mention par d√©faut
          data.premier_choix,
          'ANGLAIS', // deuxieme_choix par d√©faut
          'HISTOIRE', // troisieme_choix par d√©faut
          '{}', // documents vide
          data.statut
        ]);
        
        createdCount++;
        
      } catch (insertError) {
        console.error(`Erreur insertion ${data.nom}:`, insertError);
      }
    }
    
    console.log(`‚úÖ ${createdCount} dossiers de test cr√©√©s`);
    
    res.json({
      success: true,
      message: `${createdCount} dossiers de test cr√©√©s avec succ√®s`,
      created_count: createdCount,
      total_attempted: testData.length
    });
    
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation donn√©es test:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la cr√©ation des donn√©es de test',
      details: error.message
    });
  }
});

// 6. ROUTE DE NETTOYAGE DES DONN√âES
app.delete('/api/admin/stats/clear-test-data', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üóëÔ∏è Nettoyage donn√©es de test...');
    
    const result = await pool.query('DELETE FROM applications WHERE email LIKE \'%@test.com\'');
    const deletedCount = result.rowCount;
    
    console.log(`üóëÔ∏è ${deletedCount} dossiers de test supprim√©s`);
    
    res.json({
      success: true,
      message: `${deletedCount} dossiers de test supprim√©s`,
      deleted_count: deletedCount
    });
    
  } catch (error) {
    console.error('‚ùå Erreur nettoyage:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du nettoyage',
      details: error.message
    });
  }
});

// 7. MIDDLEWARE DE GESTION D'ERREUR GLOBAL POUR LES STATS
app.use('/api/admin/stats', (error, req, res, next) => {
    console.error('MIDDLEWARE ERREUR STATS:', error);
    
    // Forcer JSON m√™me en cas d'erreur
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    if (res.headersSent) {
        return next(error);
    }
    
    const errorResponse = {
        success: false,
        error: 'Erreur dans le module statistiques',
        details: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne',
        path: req.path,
        method: req.method,
        timestamp: new Date().toISOString()
    };
    
    res.status(500).json(errorResponse);
});

console.log('Corrections JSON appliqu√©es - Red√©marrez le serveur');

// Statistiques par lieu d'obtention
app.get('/api/admin/stats/lieu-obtention', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        lieu_obtention,
        COUNT(*) as nombre,
        COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves,
        COUNT(CASE WHEN statut = 'rejete' THEN 1 END) as rejetes,
        COUNT(CASE WHEN statut = 'en-attente' THEN 1 END) as en_attente,
        COUNT(DISTINCT type_bac) as diversite_bacs
      FROM applications 
      GROUP BY lieu_obtention 
      ORDER BY nombre DESC
    `);
    
    res.json({ 
      stats: result.rows,
      total: result.rows.reduce((sum, row) => sum + parseInt(row.nombre), 0)
    });
  } catch (error) {
    console.error('Erreur statistiques par lieu d\'obtention:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Statistiques temporelles (√©volution par mois)
app.get('/api/admin/stats/temporelles', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        DATE_TRUNC('month', created_at) as mois,
        TO_CHAR(DATE_TRUNC('month', created_at), 'YYYY-MM') as mois_libelle,
        COUNT(*) as nombre_candidatures,
        COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves,
        COUNT(CASE WHEN genre = 'masculin' THEN 1 END) as hommes,
        COUNT(CASE WHEN genre = 'feminin' THEN 1 END) as femmes
      FROM applications 
      WHERE created_at >= CURRENT_DATE - INTERVAL '12 months'
      GROUP BY DATE_TRUNC('month', created_at) 
      ORDER BY mois
    `);
    
    res.json({ 
      stats: result.rows,
      period: '12 derniers mois'
    });
  } catch (error) {
    console.error('Erreur statistiques temporelles:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Statistiques par facult√©
// Dans server.js, remplacer la route /api/admin/stats/facultes-candidatures
app.get('/api/admin/stats/facultes-candidatures', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('R√©cup√©ration stats facult√©s...');
    
    const result = await pool.query(`
      SELECT 
        fac.nom as faculte,
        fac.libelle as faculte_libelle,
        COUNT(DISTINCT f.id) as nombre_filieres,
        COUNT(CASE WHEN UPPER(TRIM(a.premier_choix)) = UPPER(TRIM(f.nom)) THEN a.id END)::integer as premier_choix,
        COUNT(CASE WHEN UPPER(TRIM(a.deuxieme_choix)) = UPPER(TRIM(f.nom)) THEN a.id END)::integer as deuxieme_choix,
        COUNT(CASE WHEN UPPER(TRIM(a.troisieme_choix)) = UPPER(TRIM(f.nom)) THEN a.id END)::integer as troisieme_choix,
        COUNT(CASE 
          WHEN (UPPER(TRIM(a.premier_choix)) = UPPER(TRIM(f.nom)) OR 
                UPPER(TRIM(a.deuxieme_choix)) = UPPER(TRIM(f.nom)) OR 
                UPPER(TRIM(a.troisieme_choix)) = UPPER(TRIM(f.nom)))
               AND a.statut = 'approuve' 
          THEN a.id END)::integer as approuves,
        (COUNT(CASE WHEN UPPER(TRIM(a.premier_choix)) = UPPER(TRIM(f.nom)) THEN a.id END) +
         COUNT(CASE WHEN UPPER(TRIM(a.deuxieme_choix)) = UPPER(TRIM(f.nom)) THEN a.id END) +
         COUNT(CASE WHEN UPPER(TRIM(a.troisieme_choix)) = UPPER(TRIM(f.nom)) THEN a.id END))::integer as total_candidatures
      FROM facultes fac
      JOIN filieres f ON f.faculte_id = fac.id AND f.active = true
      LEFT JOIN applications a ON (
        UPPER(TRIM(a.premier_choix)) = UPPER(TRIM(f.nom)) OR
        UPPER(TRIM(a.deuxieme_choix)) = UPPER(TRIM(f.nom)) OR
        UPPER(TRIM(a.troisieme_choix)) = UPPER(TRIM(f.nom))
      )
      WHERE fac.active = true
      GROUP BY fac.id, fac.nom, fac.libelle
      HAVING COUNT(CASE WHEN UPPER(TRIM(a.premier_choix)) = UPPER(TRIM(f.nom)) THEN a.id END) +
             COUNT(CASE WHEN UPPER(TRIM(a.deuxieme_choix)) = UPPER(TRIM(f.nom)) THEN a.id END) +
             COUNT(CASE WHEN UPPER(TRIM(a.troisieme_choix)) = UPPER(TRIM(f.nom)) THEN a.id END) > 0
      ORDER BY total_candidatures DESC
    `);
    
    console.log(`${result.rows.length} facult√©s trouv√©es avec candidatures`);
    
    res.json({ 
      success: true,
      stats: result.rows,
      total: result.rows.reduce((sum, row) => sum + parseInt(row.total_candidatures || 0), 0)
    });
    
  } catch (error) {
    console.error('Erreur stats facult√©s:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur serveur',
      details: error.message 
    });
  }
});
// Export d√©taill√© des candidatures avec toutes les informations
app.get('/api/admin/export/candidatures-complete', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üìä Export complet des candidatures...');
    
    const result = await pool.query(`
      SELECT 
        -- Num√©ros
        a.id,
        a.numero_dossier,
        a.numero_depot,
        
        -- Informations personnelles
        a.nom,
        a.prenom,
        TO_CHAR(a.date_naissance, 'DD/MM/YYYY') as date_naissance,
        a.lieu_naissance,
        a.nationalite,
        CASE WHEN a.genre = 'masculin' THEN 'Masculin' ELSE 'F√©minin' END as genre,
        a.adresse,
        a.telephone,
        a.email,
        
        -- Informations baccalaur√©at
        a.type_bac,
        a.lieu_obtention,
        a.annee_obtention,
        a.mention,
        
        -- Choix de formation
        a.premier_choix,
        a.deuxieme_choix,
        a.troisieme_choix,
        
        -- Statut et dates
        CASE 
          WHEN a.statut = 'approuve' THEN 'Approuv√©'
          WHEN a.statut = 'rejete' THEN 'Rejet√©'
          ELSE 'En attente'
        END as statut,
        TO_CHAR(a.created_at, 'DD/MM/YYYY HH24:MI') as date_depot,
        TO_CHAR(a.updated_at, 'DD/MM/YYYY HH24:MI') as date_modification,
        
        -- Informations utilisateur
        u.id as user_id,
        u.nom as nom_utilisateur,
        u.email as email_utilisateur,
        u.telephone as telephone_utilisateur,
        
        -- Informations de la fili√®re du premier choix
        f1.id as filiere_id,
        f1.libelle as premier_choix_libelle,
        f1.capacite_max as capacite_filiere,
        fac1.id as faculte_id,
        fac1.nom as faculte_premier_choix,
        fac1.libelle as faculte_libelle,
        
        -- Documents (v√©rification pr√©sence)
        CASE WHEN a.documents::text LIKE '%photoIdentite%' AND a.documents::text NOT LIKE '%"photoIdentite":"Non fourni"%' THEN 'Oui' ELSE 'Non' END as photo_identite,
        CASE WHEN a.documents::text LIKE '%pieceIdentite%' AND a.documents::text NOT LIKE '%"pieceIdentite":"Non fourni"%' THEN 'Oui' ELSE 'Non' END as piece_identite,
        CASE WHEN a.documents::text LIKE '%diplomeBac%' AND a.documents::text NOT LIKE '%"diplomeBac":"Non fourni"%' THEN 'Oui' ELSE 'Non' END as diplome_bac,
        CASE WHEN a.documents::text LIKE '%releve%' AND a.documents::text NOT LIKE '%"releve":"Non fourni"%' THEN 'Oui' ELSE 'Non' END as releve_notes,
        CASE WHEN a.documents::text LIKE '%certificatNationalite%' AND a.documents::text NOT LIKE '%"certificatNationalite":"Non fourni"%' AND a.documents::text NOT LIKE '%"certificatNationalite":"Optionnel"%' THEN 'Oui' ELSE 'Non' END as certificat_nationalite,
        
        -- Documents JSON complet (optionnel)
        a.documents::text as documents_json
        
      FROM applications a
      LEFT JOIN users u ON a.user_id = u.id
      LEFT JOIN filieres f1 ON UPPER(TRIM(f1.nom)) = UPPER(TRIM(a.premier_choix))
      LEFT JOIN facultes fac1 ON f1.faculte_id = fac1.id
      ORDER BY a.created_at DESC
    `);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Aucune candidature trouv√©e' });
    }
    
    // Cr√©er le CSV avec TOUS les champs
    const headers = [
      'ID',
      'Numero Dossier',
      'Numero Depot',
      'Nom',
      'Prenom',
      'Date Naissance',
      'Lieu Naissance',
      'Nationalite',
      'Genre',
      'Adresse',
      'Telephone',
      'Email',
      'Type Bac',
      'Lieu Obtention',
      'Annee Obtention',
      'Mention',
      'Premier Choix',
      'Filiere Premier Choix',
      'Faculte Premier Choix',
      'Faculte Libelle',
      'Capacite Filiere',
      'Deuxieme Choix',
      'Troisieme Choix',
      'Statut',
      'Date Depot',
      'Date Modification',
      'User ID',
      'Nom Utilisateur',
      'Email Utilisateur',
      'Telephone Utilisateur',
      'Photo Identite',
      'Piece Identite',
      'Diplome Bac',
      'Releve Notes',
      'Certificat Nationalite'
    ].join(',');
    
    const rows = result.rows.map(row => {
      return [
        row.id,
        row.numero_dossier,
        row.numero_depot || 'N/A',
        `"${(row.nom || '').replace(/"/g, '""')}"`,
        `"${(row.prenom || '').replace(/"/g, '""')}"`,
        row.date_naissance,
        `"${(row.lieu_naissance || '').replace(/"/g, '""')}"`,
        row.nationalite,
        row.genre,
        `"${(row.adresse || '').replace(/"/g, '""')}"`,
        row.telephone,
        row.email,
        row.type_bac,
        `"${(row.lieu_obtention || '').replace(/"/g, '""')}"`,
        row.annee_obtention,
        row.mention,
        `"${(row.premier_choix || '').replace(/"/g, '""')}"`,
        `"${(row.premier_choix_libelle || row.premier_choix || '').replace(/"/g, '""')}"`,
        `"${(row.faculte_premier_choix || 'N/A').replace(/"/g, '""')}"`,
        `"${(row.faculte_libelle || 'N/A').replace(/"/g, '""')}"`,
        row.capacite_filiere || 'Illimit√©e',
        `"${(row.deuxieme_choix || '').replace(/"/g, '""')}"`,
        `"${(row.troisieme_choix || '').replace(/"/g, '""')}"`,
        row.statut,
        row.date_depot,
        row.date_modification,
        row.user_id,
        `"${(row.nom_utilisateur || '').replace(/"/g, '""')}"`,
        row.email_utilisateur,
        row.telephone_utilisateur,
        row.photo_identite,
        row.piece_identite,
        row.diplome_bac,
        row.releve_notes,
        row.certificat_nationalite
      ].join(',');
    });
    
    const csv = [headers, ...rows].join('\n');
    
    const filename = `candidatures_complete_${new Date().toISOString().split('T')[0]}.csv`;
    
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send('\uFEFF' + csv); // BOM UTF-8 pour Excel
    
    console.log(`‚úÖ Export de ${result.rows.length} candidatures avec tous les champs`);
    
  } catch (error) {
    console.error('‚ùå Erreur export complet:', error);
    res.status(500).json({ 
      error: 'Erreur serveur',
      details: error.message 
    });
  }
});
// Export par section sp√©cifique (genre, facult√©, etc.)
// =================== DANS SERVER.JS - AJOUTER CES ROUTES ===================

// 1. INSTALLER D'ABORD LE PACKAGE EXCEL


// =================== ROUTES D'EXPORT CORRIG√âES ===================

// Export Excel des dossiers approuv√©s (COMPLET)
app.get('/api/admin/export/approuves-excel', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üìä Export Excel des dossiers approuv√©s...');
    
    const result = await pool.query(`
      SELECT 
        a.numero_dossier,
        a.numero_depot,
        a.nom,
        a.prenom,
        TO_CHAR(a.date_naissance, 'DD/MM/YYYY') as date_naissance,
        a.lieu_naissance,
        a.nationalite,
        CASE WHEN a.genre = 'masculin' THEN 'Masculin' ELSE 'F√©minin' END as genre,
        a.adresse,
        a.telephone,
        a.email,
        a.type_bac,
        a.lieu_obtention,
        a.annee_obtention,
        a.mention,
        a.premier_choix,
        a.deuxieme_choix,
        a.troisieme_choix,
        TO_CHAR(a.created_at, 'DD/MM/YYYY HH24:MI') as date_depot,
        -- Informations de la fili√®re
        f1.libelle as premier_choix_libelle,
        fac1.nom as faculte_premier_choix,
        fac1.libelle as faculte_libelle,
        -- V√©rification documents
        CASE WHEN a.documents::text LIKE '%photoIdentite%' THEN 'Oui' ELSE 'Non' END as photo_identite,
        CASE WHEN a.documents::text LIKE '%pieceIdentite%' THEN 'Oui' ELSE 'Non' END as piece_identite,
        CASE WHEN a.documents::text LIKE '%diplomeBac%' THEN 'Oui' ELSE 'Non' END as diplome_bac,
        CASE WHEN a.documents::text LIKE '%releve%' THEN 'Oui' ELSE 'Non' END as releve_notes,
        CASE WHEN a.documents::text LIKE '%certificatNationalite%' THEN 'Oui' ELSE 'Non' END as certificat_nationalite,
        u.nom as nom_compte_utilisateur,
        u.email as email_compte
      FROM applications a
      LEFT JOIN users u ON a.user_id = u.id
      LEFT JOIN filieres f1 ON UPPER(TRIM(f1.nom)) = UPPER(TRIM(a.premier_choix))
      LEFT JOIN facultes fac1 ON f1.faculte_id = fac1.id
      WHERE a.statut = 'approuve'
      ORDER BY a.created_at DESC
    `);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Aucun dossier approuv√© trouv√©' });
    }
    
    // Cr√©er le workbook Excel
    const workbook = new ExcelJS.Workbook();
    workbook.creator = 'Universit√© Djibo Hamani - EduFile';
    workbook.created = new Date();
    
    // Feuille principale - Tous les dossiers approuv√©s
    const worksheet = workbook.addWorksheet('Dossiers Approuv√©s', {
      properties: { tabColor: { argb: '28a745' } }
    });
    
    // D√©finir les colonnes avec largeurs
    worksheet.columns = [
      { header: 'N¬∞ Dossier', key: 'numero_dossier', width: 15 },
      { header: 'N¬∞ D√©p√¥t', key: 'numero_depot', width: 15 },
      { header: 'Nom', key: 'nom', width: 20 },
      { header: 'Pr√©nom', key: 'prenom', width: 20 },
      { header: 'Date Naissance', key: 'date_naissance', width: 15 },
      { header: 'Lieu Naissance', key: 'lieu_naissance', width: 20 },
      { header: 'Nationalit√©', key: 'nationalite', width: 15 },
      { header: 'Genre', key: 'genre', width: 12 },
      { header: 'Adresse', key: 'adresse', width: 30 },
      { header: 'T√©l√©phone', key: 'telephone', width: 15 },
      { header: 'Email', key: 'email', width: 25 },
      { header: 'Type Bac', key: 'type_bac', width: 12 },
      { header: 'Lieu Obtention', key: 'lieu_obtention', width: 15 },
      { header: 'Ann√©e Obtention', key: 'annee_obtention', width: 15 },
      { header: 'Mention', key: 'mention', width: 12 },
      { header: 'Premier Choix', key: 'premier_choix', width: 20 },
      { header: 'Fili√®re Libell√©', key: 'premier_choix_libelle', width: 30 },
      { header: 'Facult√©', key: 'faculte_premier_choix', width: 15 },
      { header: 'Facult√© Libell√©', key: 'faculte_libelle', width: 35 },
      { header: 'Deuxi√®me Choix', key: 'deuxieme_choix', width: 20 },
      { header: 'Troisi√®me Choix', key: 'troisieme_choix', width: 20 },
      { header: 'Date D√©p√¥t', key: 'date_depot', width: 18 },
      { header: 'Photo', key: 'photo_identite', width: 8 },
      { header: 'Pi√®ce ID', key: 'piece_identite', width: 8 },
      { header: 'Dipl√¥me', key: 'diplome_bac', width: 8 },
      { header: 'Relev√©', key: 'releve_notes', width: 8 },
      { header: 'Certificat', key: 'certificat_nationalite', width: 10 }
    ];
    
    // Style de l'en-t√™te
    worksheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: '28a745' }
    };
    worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };
    worksheet.getRow(1).height = 25;
    
    // Ajouter les donn√©es
    result.rows.forEach((row, index) => {
      const excelRow = worksheet.addRow(row);
      
      // Alternance de couleurs
      if (index % 2 === 0) {
        excelRow.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'F8F9FA' }
        };
      }
      
      // Colorer les documents manquants en rouge
      ['photo_identite', 'piece_identite', 'diplome_bac', 'releve_notes'].forEach((doc, colIndex) => {
        const cell = excelRow.getCell(23 + colIndex);
        if (cell.value === 'Non') {
          cell.font = { color: { argb: 'DC3545' }, bold: true };
        } else {
          cell.font = { color: { argb: '28a745' }, bold: true };
        }
      });
    });
    
    // Bordures pour toutes les cellules
    worksheet.eachRow((row, rowNumber) => {
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
      });
    });
    
    // Figer la premi√®re ligne
    worksheet.views = [
      { state: 'frozen', ySplit: 1 }
    ];
    
    // ===== FEUILLE 2: STATISTIQUES PAR FACULT√â =====
    const statsSheet = workbook.addWorksheet('Statistiques par Facult√©', {
      properties: { tabColor: { argb: '667eea' } }
    });
    
    const statsResult = await pool.query(`
      SELECT 
        fac.nom as faculte,
        fac.libelle as faculte_libelle,
        COUNT(DISTINCT a.id) as total_approuves,
        COUNT(DISTINCT CASE WHEN a.genre = 'masculin' THEN a.id END) as hommes,
        COUNT(DISTINCT CASE WHEN a.genre = 'feminin' THEN a.id END) as femmes,
        STRING_AGG(DISTINCT a.type_bac, ', ') as types_bac
      FROM applications a
      JOIN filieres f ON UPPER(TRIM(f.nom)) = UPPER(TRIM(a.premier_choix))
      JOIN facultes fac ON f.faculte_id = fac.id
      WHERE a.statut = 'approuve'
      GROUP BY fac.nom, fac.libelle
      ORDER BY total_approuves DESC
    `);
    
    statsSheet.columns = [
      { header: 'Facult√©', key: 'faculte', width: 20 },
      { header: 'Libell√©', key: 'faculte_libelle', width: 40 },
      { header: 'Total Approuv√©s', key: 'total_approuves', width: 18 },
      { header: 'Hommes', key: 'hommes', width: 12 },
      { header: 'Femmes', key: 'femmes', width: 12 },
      { header: 'Types Bac', key: 'types_bac', width: 30 }
    ];
    
    statsSheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
    statsSheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: '667eea' }
    };
    
    statsResult.rows.forEach(row => {
      statsSheet.addRow(row);
    });
    
    // ===== FEUILLE 3: PAR FILI√àRE =====
    const filiereSheet = workbook.addWorksheet('Par Fili√®re', {
      properties: { tabColor: { argb: 'ffc107' } }
    });
    
    const filiereResult = await pool.query(`
      SELECT 
        a.premier_choix as filiere,
        f.libelle as filiere_libelle,
        fac.nom as faculte,
        COUNT(*) as nombre_approuves,
        COUNT(CASE WHEN a.genre = 'masculin' THEN 1 END) as hommes,
        COUNT(CASE WHEN a.genre = 'feminin' THEN 1 END) as femmes
      FROM applications a
      LEFT JOIN filieres f ON UPPER(TRIM(f.nom)) = UPPER(TRIM(a.premier_choix))
      LEFT JOIN facultes fac ON f.faculte_id = fac.id
      WHERE a.statut = 'approuve'
      GROUP BY a.premier_choix, f.libelle, fac.nom
      ORDER BY nombre_approuves DESC
    `);
    
    filiereSheet.columns = [
      { header: 'Fili√®re', key: 'filiere', width: 20 },
      { header: 'Libell√©', key: 'filiere_libelle', width: 35 },
      { header: 'Facult√©', key: 'faculte', width: 20 },
      { header: 'Approuv√©s', key: 'nombre_approuves', width: 15 },
      { header: 'Hommes', key: 'hommes', width: 12 },
      { header: 'Femmes', key: 'femmes', width: 12 }
    ];
    
    filiereSheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
    filiereSheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'ffc107' }
    };
    
    filiereResult.rows.forEach(row => {
      filiereSheet.addRow(row);
    });
    
    // G√©n√©rer le fichier
    const filename = `Dossiers_Approuves_${new Date().toISOString().split('T')[0]}.xlsx`;
    
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    
    await workbook.xlsx.write(res);
    res.end();
    
    console.log(`‚úÖ Export Excel de ${result.rows.length} dossiers approuv√©s`);
    
  } catch (error) {
    console.error('‚ùå Erreur export Excel:', error);
    res.status(500).json({ 
      error: 'Erreur serveur lors de l\'export Excel',
      details: error.message 
    });
  }
});

// Export par section (CORRIG√â)
app.get('/api/admin/export/section/:type', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { type } = req.params;
        const { filter } = req.query;
        
        console.log(`üìä Export section ${type}${filter ? ` - Filtre: ${filter}` : ''}`);
        
        let query = '';
        let params = [];
        let filename = '';
        let sheetName = '';
        let columns = [];
        
        switch(type) {
            case 'par-faculte':
    if (filter) {
        query = `
            SELECT 
                -- Num√©ros
                a.id,
                a.numero_dossier, 
                a.numero_depot,
                
                -- Informations personnelles
                a.nom, 
                a.prenom, 
                TO_CHAR(a.date_naissance, 'DD/MM/YYYY') as date_naissance,
                a.lieu_naissance,
                a.nationalite,
                CASE WHEN a.genre = 'masculin' THEN 'Masculin' ELSE 'F√©minin' END as genre,
                a.adresse,
                a.telephone,
                a.email,
                
                -- Informations baccalaur√©at
                a.type_bac,
                a.lieu_obtention,
                a.annee_obtention,
                a.mention,
                
                -- Choix de formation
                a.premier_choix,
                a.deuxieme_choix,
                a.troisieme_choix,
                
                -- Statut
                CASE 
                    WHEN a.statut = 'approuve' THEN 'Approuv√©'
                    WHEN a.statut = 'rejete' THEN 'Rejet√©'
                    ELSE 'En attente'
                END as statut,
                
                -- Informations facult√©/fili√®re
                fac.nom as faculte, 
                fac.libelle as faculte_libelle,
                f.libelle as filiere_libelle,
                
                -- Dates
                TO_CHAR(a.created_at, 'DD/MM/YYYY HH24:MI') as date_depot,
                TO_CHAR(a.updated_at, 'DD/MM/YYYY HH24:MI') as date_modification
            FROM applications a
            JOIN filieres f ON UPPER(TRIM(f.nom)) = UPPER(TRIM(a.premier_choix))
            JOIN facultes fac ON f.faculte_id = fac.id
            WHERE fac.nom = $1
            ORDER BY a.created_at DESC
        `;
        params = [filter];
        filename = `Export_Faculte_${filter}_${new Date().toISOString().split('T')[0]}.xlsx`;
        sheetName = `Facult√© ${filter}`;
    } else {
        query = `
            SELECT 
                -- Num√©ros
                a.id,
                a.numero_dossier, 
                a.numero_depot,
                
                -- Informations personnelles
                a.nom, 
                a.prenom, 
                TO_CHAR(a.date_naissance, 'DD/MM/YYYY') as date_naissance,
                a.lieu_naissance,
                a.nationalite,
                CASE WHEN a.genre = 'masculin' THEN 'Masculin' ELSE 'F√©minin' END as genre,
                a.adresse,
                a.telephone,
                a.email,
                
                -- Informations baccalaur√©at
                a.type_bac,
                a.lieu_obtention,
                a.annee_obtention,
                a.mention,
                
                -- Choix de formation
                a.premier_choix,
                a.deuxieme_choix,
                a.troisieme_choix,
                
                -- Statut
                CASE 
                    WHEN a.statut = 'approuve' THEN 'Approuv√©'
                    WHEN a.statut = 'rejete' THEN 'Rejet√©'
                    ELSE 'En attente'
                END as statut,
                
                -- Informations facult√©/fili√®re
                fac.nom as faculte, 
                fac.libelle as faculte_libelle,
                f.libelle as filiere_libelle,
                
                -- Dates
                TO_CHAR(a.created_at, 'DD/MM/YYYY HH24:MI') as date_depot,
                TO_CHAR(a.updated_at, 'DD/MM/YYYY HH24:MI') as date_modification
            FROM applications a
            JOIN filieres f ON UPPER(TRIM(f.nom)) = UPPER(TRIM(a.premier_choix))
            JOIN facultes fac ON f.faculte_id = fac.id
            ORDER BY fac.nom, a.created_at DESC
        `;
        filename = `Export_Toutes_Facultes_${new Date().toISOString().split('T')[0]}.xlsx`;
        sheetName = 'Toutes Facult√©s';
    }
    
    columns = [
        { header: 'ID', key: 'id', width: 8 },
        { header: 'N¬∞ DOSSIER', key: 'numero_dossier', width: 15 },
        { header: 'N¬∞ D√âP√îT', key: 'numero_depot', width: 15 },
        { header: 'NOM', key: 'nom', width: 20 },
        { header: 'PR√âNOM', key: 'prenom', width: 20 },
        { header: 'DATE NAISSANCE', key: 'date_naissance', width: 15 },
        { header: 'LIEU NAISSANCE', key: 'lieu_naissance', width: 20 },
        { header: 'NATIONALIT√â', key: 'nationalite', width: 15 },
        { header: 'GENRE', key: 'genre', width: 12 },
        { header: 'ADRESSE', key: 'adresse', width: 30 },
        { header: 'T√âL√âPHONE', key: 'telephone', width: 15 },
        { header: 'EMAIL', key: 'email', width: 25 },
        { header: 'TYPE BAC', key: 'type_bac', width: 12 },
        { header: 'LIEU OBTENTION', key: 'lieu_obtention', width: 15 },
        { header: 'ANN√âE OBTENTION', key: 'annee_obtention', width: 15 },
        { header: 'MENTION', key: 'mention', width: 12 },
        { header: 'PREMIER CHOIX', key: 'premier_choix', width: 20 },
        { header: 'DEUXI√àME CHOIX', key: 'deuxieme_choix', width: 20 },
        { header: 'TROISI√àME CHOIX', key: 'troisieme_choix', width: 20 },
        { header: 'FILI√àRE LIBELL√â', key: 'filiere_libelle', width: 30 },
        { header: 'FACULT√â', key: 'faculte', width: 15 },
        { header: 'FACULT√â LIBELL√â', key: 'faculte_libelle', width: 35 },
        { header: 'STATUT', key: 'statut', width: 15 },
        { header: 'DATE D√âP√îT', key: 'date_depot', width: 18 },
        { header: 'DATE MODIFICATION', key: 'date_modification', width: 18 }
    ];
    break;
                
            case 'par-genre':
                query = `
                    SELECT 
                        CASE WHEN a.genre = 'masculin' THEN 'Masculin' ELSE 'F√©minin' END as genre,
                        a.numero_dossier, a.nom, a.prenom, a.email, a.telephone,
                        a.type_bac, a.premier_choix,
                        CASE 
                            WHEN a.statut = 'approuve' THEN 'Approuv√©'
                            WHEN a.statut = 'rejete' THEN 'Rejet√©'
                            ELSE 'En attente'
                        END as statut,
                        TO_CHAR(a.created_at, 'DD/MM/YYYY') as date_depot
                    FROM applications a
                    ${filter ? 'WHERE a.genre = $1' : ''}
                    ORDER BY a.genre, a.created_at DESC
                `;
                if (filter) params = [filter];
                filename = `Export_Genre_${filter || 'Tous'}_${new Date().toISOString().split('T')[0]}.xlsx`;
                sheetName = `Genre ${filter || 'Tous'}`;
                
                columns = [
                    { header: 'FACULTE', key: 'faculte', width: 15 },
                    { header: 'LIBELLE FACULTE', key: 'faculte_libelle', width: 35 },
                    { header: 'NUMERO DOSSIER', key: 'numero_dossier', width: 15 },
                    { header: 'NOM', key: 'nom', width: 20 },
                    { header: 'PRENOM', key: 'prenom', width: 20 },
                    { header: 'Date_Naiss', key: 'date_naissance', width: 15 },
                    { header: 'Lieu_Naiss', key: 'lieu_naissance', width: 20 },
                    { header: 'Adresse', key: 'adresse', width: 20 },
                    { header: 'Nationalit√©', key: 'nationalite', width: 15 },
                    { header: 'EMAIL', key: 'email', width: 25 },
                    { header: 'GENRE', key: 'genre', width: 12 },
                    { header: 'TYPE BAC', key: 'type_bac', width: 12 },
                    { header: 'PREMIER CHOIX', key: 'premier_choix', width: 20 },
                    { header: 'DEUXIEME CHOIX', key: 'deuxieme_choix', width: 20 },
                    { header: 'TROISIEME CHOIX', key: 'troisieme_choix', width: 20 },
                    { header: 'STATUT', key: 'statut', width: 15 },
                    { header: 'DATE DEPOT', key: 'date_depot', width: 15 }
                ];
                break;
                
            case 'par-statut':
                const statutFilter = filter || 'en-attente';
                query = `
                    SELECT 
                        a.numero_dossier, a.numero_depot, a.nom, a.prenom, a.email, a.telephone,
                        CASE WHEN a.genre = 'masculin' THEN 'Masculin' ELSE 'F√©minin' END as genre,
                        a.type_bac, a.premier_choix,, a.deuxieme_choix,, a.troisieme_choix,
                        CASE 
                            WHEN a.statut = 'approuve' THEN 'Approuv√©'
                            WHEN a.statut = 'rejete' THEN 'Rejet√©'
                            ELSE 'En attente'
                        END as statut,
                        TO_CHAR(a.created_at, 'DD/MM/YYYY') as date_depot
                    FROM applications a
                    WHERE a.statut = $1
                    ORDER BY a.created_at DESC
                `;
                params = [statutFilter];
                filename = `Export_Statut_${statutFilter}_${new Date().toISOString().split('T')[0]}.xlsx`;
                sheetName = `Statut ${statutFilter}`;
                
                columns = [
                    { header: 'FACULTE', key: 'faculte', width: 15 },
                    { header: 'LIBELLE FACULTE', key: 'faculte_libelle', width: 35 },
                    { header: 'NUMERO DOSSIER', key: 'numero_dossier', width: 15 },
                    { header: 'NOM', key: 'nom', width: 20 },
                    { header: 'PRENOM', key: 'prenom', width: 20 },
                    { header: 'Date_Naiss', key: 'date_naissance', width: 15 },
                    { header: 'Lieu_Naiss', key: 'lieu_naissance', width: 20 },
                    { header: 'Adresse', key: 'adresse', width: 20 },
                    { header: 'Nationalit√©', key: 'nationalite', width: 15 },
                    { header: 'EMAIL', key: 'email', width: 25 },
                    { header: 'GENRE', key: 'genre', width: 12 },
                    { header: 'TYPE BAC', key: 'type_bac', width: 12 },
                    { header: 'PREMIER CHOIX', key: 'premier_choix', width: 20 },
                    { header: 'DEUXIEME CHOIX', key: 'deuxieme_choix', width: 20 },
                    { header: 'TROISIEME CHOIX', key: 'troisieme_choix', width: 20 },
                    { header: 'STATUT', key: 'statut', width: 15 },
                    { header: 'DATE DEPOT', key: 'date_depot', width: 15 }
                ];
                break;
                
            default:
                return res.status(400).json({ error: 'Type d\'export invalide' });
        }
        
        console.log('Ex√©cution requ√™te:', query);
        console.log('Param√®tres:', params);
        
        const result = await pool.query(query, params);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ 
                error: 'Aucune donn√©e trouv√©e pour ces crit√®res',
                type,
                filter 
            });
        }
        
        console.log(`Donn√©es r√©cup√©r√©es: ${result.rows.length} lignes`);
        
        // Cr√©er workbook Excel avec ExcelJS
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet(sheetName);
        
        // D√©finir les colonnes
        worksheet.columns = columns;
        
        // Style en-t√™te
        worksheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
        worksheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '667eea' }
        };
        worksheet.getRow(1).alignment = { 
            vertical: 'middle', 
            horizontal: 'center' 
        };
        worksheet.getRow(1).height = 25;
        
        // Ajouter donn√©es avec alternance de couleurs
        result.rows.forEach((row, index) => {
            const excelRow = worksheet.addRow(row);
            
            // Alternance de couleurs
            if (index % 2 === 0) {
                excelRow.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: 'F8F9FA' }
                };
            }
        });
        
        // Bordures pour toutes les cellules
        worksheet.eachRow((row) => {
            row.eachCell((cell) => {
                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                };
            });
        });
        
        // Figer la premi√®re ligne
        worksheet.views = [
            { state: 'frozen', ySplit: 1 }
        ];
        
        // Envoyer le fichier
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        await workbook.xlsx.write(res);
        res.end();
        
        console.log(`‚úÖ Export ${type} - ${result.rows.length} lignes envoy√©es`);
        
    } catch (error) {
        console.error('‚ùå Erreur export section:', error);
        res.status(500).json({ 
            error: 'Erreur lors de l\'export',
            details: error.message 
        });
    }
});

// 2. ROUTE DASHBOARD CORRIG√âE
app.get('/api/admin/stats/dashboard', authenticateToken, requireAdmin, async (req, res) => {
    console.log('=== D√âBUT ROUTE DASHBOARD ===');
    
    try {
        // Forcer JSON d√®s le d√©but
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        
        console.log('User:', req.user?.email, 'Role:', req.user?.role);
        
        // V√©rification utilisateur
        if (!req.user || req.user.role !== 'admin') {
            console.log('ERREUR: Acc√®s non autoris√©');
            return res.status(403).json({
                success: false,
                error: 'Acc√®s administrateur requis'
            });
        }
        
        // Test connexion base de donn√©es
        try {
            await pool.query('SELECT 1');
            console.log('Connexion DB OK');
        } catch (dbError) {
            console.error('ERREUR DB:', dbError);
            return res.status(500).json({
                success: false,
                error: 'Erreur de connexion √† la base de donn√©es',
                details: dbError.message
            });
        }
        
        // Compter les applications
        const countResult = await pool.query('SELECT COUNT(*) as total FROM applications');
        const totalApps = parseInt(countResult.rows[0].total);
        console.log('Total applications:', totalApps);
        
        // Si pas de donn√©es, retourner structure vide
        if (totalApps === 0) {
            console.log('Aucune donn√©e - retour structure vide');
            const emptyResponse = {
                success: true,
                message: 'Aucune candidature trouv√©e',
                general: {
                    total_candidatures: 0,
                    approuves: 0,
                    rejetes: 0,
                    en_attente: 0,
                    hommes: 0,
                    femmes: 0
                },
                topFilieres: [],
                repartitionBac: [],
                evolution: []
            };
            
            console.log('Envoi r√©ponse vide:', JSON.stringify(emptyResponse).substring(0, 100));
            return res.json(emptyResponse);
        }
        
        // Requ√™tes avec gestion d'erreur individuelle
        let generalData = {
            total_candidatures: 0,
            approuves: 0,
            rejetes: 0,
            en_attente: 0,
            hommes: 0,
            femmes: 0
        };
        
        let topFilieres = [];
        let repartitionBac = [];
        let evolution = [];
        
        // 1. Statistiques g√©n√©rales
        try {
            const generalResult = await pool.query(`
                SELECT 
                    COUNT(*) as total_candidatures,
                    COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves,
                    COUNT(CASE WHEN statut = 'rejete' THEN 1 END) as rejetes,
                    COUNT(CASE WHEN statut = 'en-attente' THEN 1 END) as en_attente,
                    COUNT(CASE WHEN genre = 'masculin' THEN 1 END) as hommes,
                    COUNT(CASE WHEN genre = 'feminin' THEN 1 END) as femmes
                FROM applications
            `);
            
            if (generalResult.rows.length > 0) {
                const row = generalResult.rows[0];
                generalData = {
                    total_candidatures: parseInt(row.total_candidatures) || 0,
                    approuves: parseInt(row.approuves) || 0,
                    rejetes: parseInt(row.rejetes) || 0,
                    en_attente: parseInt(row.en_attente) || 0,
                    hommes: parseInt(row.hommes) || 0,
                    femmes: parseInt(row.femmes) || 0
                };
            }
            console.log('Stats g√©n√©rales OK:', generalData);
        } catch (error) {
            console.error('ERREUR stats g√©n√©rales:', error);
        }
        
        // 2. Top fili√®res
        try {
            const filieresResult = await pool.query(`
                SELECT premier_choix as filiere, COUNT(*) as nombre
                FROM applications 
                WHERE premier_choix IS NOT NULL 
                    AND TRIM(premier_choix) != '' 
                GROUP BY premier_choix 
                ORDER BY nombre DESC 
                LIMIT 5
            `);
            
            topFilieres = filieresResult.rows.map(f => ({
                filiere: f.filiere,
                nombre: parseInt(f.nombre)
            }));
            console.log('Top fili√®res OK:', topFilieres.length, '√©l√©ments');
        } catch (error) {
            console.error('ERREUR top fili√®res:', error);
        }
        
        // 3. R√©partition bac
        try {
            const bacResult = await pool.query(`
                SELECT type_bac, COUNT(*) as nombre
                FROM applications 
                WHERE type_bac IS NOT NULL 
                    AND TRIM(type_bac) != ''
                GROUP BY type_bac 
                ORDER BY nombre DESC
                LIMIT 10
            `);
            
            repartitionBac = bacResult.rows.map(b => ({
                type_bac: b.type_bac,
                nombre: parseInt(b.nombre)
            }));
            console.log('R√©partition bac OK:', repartitionBac.length, '√©l√©ments');
        } catch (error) {
            console.error('ERREUR r√©partition bac:', error);
        }
        
        // 4. √âvolution temporelle
        try {
            const evolutionResult = await pool.query(`
                SELECT 
                    TO_CHAR(created_at, 'Mon YYYY') as mois,
                    COUNT(*) as candidatures,
                    DATE_TRUNC('month', created_at) as mois_date
                FROM applications 
                WHERE created_at >= CURRENT_DATE - INTERVAL '6 months'
                GROUP BY TO_CHAR(created_at, 'Mon YYYY'), DATE_TRUNC('month', created_at)
                ORDER BY mois_date
            `);
            
            evolution = evolutionResult.rows.map(e => ({
                mois: e.mois,
                candidatures: parseInt(e.candidatures)
            }));
            console.log('√âvolution OK:', evolution.length, '√©l√©ments');
        } catch (error) {
            console.error('ERREUR √©volution:', error);
        }
        
        // Construire la r√©ponse finale
        const finalResponse = {
            success: true,
            timestamp: new Date().toISOString(),
            general: generalData,
            topFilieres: topFilieres,
            repartitionBac: repartitionBac,
            evolution: evolution
        };
        
        console.log('R√©ponse finale construite:', {
            success: finalResponse.success,
            total: finalResponse.general.total_candidatures,
            filieres: finalResponse.topFilieres.length,
            bacs: finalResponse.repartitionBac.length,
            evolution: finalResponse.evolution.length
        });
        
        // V√©rifier que c'est du JSON valide
        try {
            JSON.stringify(finalResponse);
            console.log('JSON valide confirm√©');
        } catch (jsonError) {
            console.error('ERREUR: JSON invalide:', jsonError);
            return res.status(500).json({
                success: false,
                error: 'Erreur de s√©rialisation JSON'
            });
        }
        
        // Envoyer la r√©ponse
        res.json(finalResponse);
        console.log('=== R√âPONSE ENVOY√âE AVEC SUCC√àS ===');
        
    } catch (globalError) {
        console.error('=== ERREUR GLOBALE DASHBOARD ===');
        console.error('Message:', globalError.message);
        console.error('Stack:', globalError.stack);
        
        // S'assurer qu'on envoie du JSON m√™me en cas d'erreur
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        
        const errorResponse = {
            success: false,
            error: 'Erreur serveur lors de la r√©cup√©ration des statistiques',
            details: globalError.message,
            timestamp: new Date().toISOString()
        };
        
        try {
            res.status(500).json(errorResponse);
        } catch (sendError) {
            console.error('ERREUR lors de l\'envoi de la r√©ponse d\'erreur:', sendError);
            res.status(500).end('{"success":false,"error":"Erreur critique serveur"}');
        }
    }
});

app.get('/api/admin/stats/test', authenticateToken, requireAdmin, (req, res) => {
    console.log('Route de test appel√©e');
    res.json({
        success: true,
        message: 'Test r√©ussi',
        timestamp: new Date().toISOString(),
        user: req.user?.email,
        role: req.user?.role
    });
});

app.get('/api/admin/test-routes', authenticateToken, requireAdmin, async (req, res) => {
    try {
        console.log('üß™ Test des routes statistiques...');
        
        const routes = [
            '/admin/stats/dashboard',
            '/admin/stats/genre', 
            '/admin/stats/filieres',
            '/admin/stats/type-bac'
        ];
        
        const results = {};
        
        for (const route of routes) {
            try {
                // Simuler un appel interne pour tester
                const testResult = await pool.query('SELECT COUNT(*) FROM applications');
                results[route] = {
                    status: 'OK',
                    available: true,
                    data_count: testResult.rows[0].count
                };
            } catch (error) {
                results[route] = {
                    status: 'ERROR',
                    available: false,
                    error: error.message
                };
            }
        }
        
        res.json({
            success: true,
            test_time: new Date().toISOString(),
            routes: results,
            database_connection: 'OK'
        });
        
    } catch (error) {
        console.error('‚ùå Erreur test routes:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors du test des routes',
            details: error.message
        });
    }
});

// Export des statistiques en CSV
app.get('/api/admin/export/statistiques/:type', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { type } = req.params;
    let query = '';
    let filename = '';
    
    switch(type) {
      case 'genre':
        query = `
          SELECT genre, COUNT(*) as total,
                 COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves,
                 COUNT(CASE WHEN statut = 'rejete' THEN 1 END) as rejetes
          FROM applications GROUP BY genre
        `;
        filename = 'statistiques_genre.csv';
        break;
        
      case 'filieres':
        query = `
          SELECT premier_choix as filiere, COUNT(*) as total,
                 COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves
          FROM applications GROUP BY premier_choix ORDER BY total DESC
        `;
        filename = 'statistiques_filieres.csv';
        break;
        
      case 'type_bac':
        query = `
          SELECT type_bac, COUNT(*) as total,
                 COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves
          FROM applications GROUP BY type_bac ORDER BY total DESC
        `;
        filename = 'statistiques_type_bac.csv';
        break;
        
      default:
        return res.status(400).json({ error: 'Type de statistique invalide' });
    }
    
    const result = await pool.query(query);
    
    // Cr√©er le CSV
    const headers = Object.keys(result.rows[0] || {}).join(',');
    const rows = result.rows.map(row => Object.values(row).join(','));
    const csv = [headers, ...rows].join('\n');
    
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send('\uFEFF' + csv); // BOM pour UTF-8
    
  } catch (error) {
    console.error('Erreur export statistiques:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Statistiques crois√©es : Genre √ó Type de Bac
app.get('/api/admin/stats/genre-bac', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        genre,
        type_bac,
        COUNT(*) as nombre,
        COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves
      FROM applications 
      GROUP BY genre, type_bac 
      ORDER BY genre, nombre DESC
    `);
    
    res.json({ 
      stats: result.rows
    });
  } catch (error) {
    console.error('Erreur statistiques genre √ó bac:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Statistiques des mentions par fili√®re
app.get('/api/admin/stats/mentions-filieres', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        premier_choix as filiere,
        mention,
        COUNT(*) as nombre,
        COUNT(CASE WHEN statut = 'approuve' THEN 1 END) as approuves
      FROM applications 
      GROUP BY premier_choix, mention 
      HAVING COUNT(*) > 0
      ORDER BY filiere, nombre DESC
    `);
    
    res.json({ 
      stats: result.rows
    });
  } catch (error) {
    console.error('Erreur statistiques mentions √ó fili√®res:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});
app.get('/api/inscription/recherche/nouveau/:numeroDossier', async (req, res) => {
    try {
        const { numeroDossier } = req.params;
        
        console.log('üîç Recherche nouveau √©tudiant:', numeroDossier);
        
        // V√©rifier si l'√©tudiant existe d√©j√† dans la table etudiants
        let etudiantResult = await pool.query(
            'SELECT * FROM etudiants WHERE numero_dossier = $1',
            [numeroDossier]
        );
        
        if (etudiantResult.rows.length > 0) {
            const etudiant = etudiantResult.rows[0];
            
            if (!etudiant.autorise_inscription) {
                return res.status(403).json({
                    success: false,
                    error: 'Vous n\'√™tes pas autoris√© √† vous inscrire'
                });
            }
            
            return res.json({
                success: true,
                etudiant: etudiant,
                type: 'existant'
            });
        }
        
        // Sinon, chercher dans les candidatures approuv√©es
        const candidatureResult = await pool.query(
            `SELECT * FROM applications 
             WHERE numero_dossier = $1 AND statut = 'approuve'`,
            [numeroDossier]
        );
        
        if (candidatureResult.rows.length === 0) {
            return res.status(404).json({
                success: false,
                error: 'Aucun dossier approuv√© trouv√© avec ce num√©ro'
            });
        }
        
        const candidature = candidatureResult.rows[0];
        
        // Cr√©er un nouvel √©tudiant √† partir de la candidature
        const nouvelEtudiant = await pool.query(
            `INSERT INTO etudiants (
                numero_dossier, nom, prenom, date_naissance, lieu_naissance,
                nationalite, genre, adresse, telephone, email,
                type_bac, lieu_obtention, annee_obtention, mention, type
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
            RETURNING *`,
            [
                candidature.numero_dossier,
                candidature.nom,
                candidature.prenom,
                candidature.date_naissance,
                candidature.lieu_naissance,
                candidature.nationalite,
                candidature.genre,
                candidature.adresse,
                candidature.telephone,
                candidature.email,
                candidature.type_bac,
                candidature.lieu_obtention,
                candidature.annee_obtention,
                candidature.mention,
                'nouveau'
            ]
        );
        
        console.log('‚úÖ Nouvel √©tudiant cr√©√©:', nouvelEtudiant.rows[0].id);
        
        res.json({
            success: true,
            etudiant: nouvelEtudiant.rows[0],
            type: 'nouveau'
        });
        
    } catch (error) {
        console.error('‚ùå Erreur recherche nouveau √©tudiant:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la recherche',
            details: error.message
        });
    }
});

// 2. Rechercher un ancien √©tudiant par matricule
app.get('/api/inscription/recherche/ancien/:matricule', async (req, res) => {
    try {
        const { matricule } = req.params;
        
        console.log('üîç Recherche ancien √©tudiant:', matricule);
        
        const result = await pool.query(
            'SELECT * FROM etudiants WHERE matricule = $1',
            [matricule]
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({
                success: false,
                error: 'Aucun √©tudiant trouv√© avec ce matricule'
            });
        }
        
        const etudiant = result.rows[0];
        
        if (!etudiant.autorise_inscription) {
            return res.status(403).json({
                success: false,
                error: 'Vous n\'√™tes pas autoris√© √† vous inscrire'
            });
        }
        
        res.json({
            success: true,
            etudiant: etudiant
        });
        
    } catch (error) {
        console.error('‚ùå Erreur recherche ancien √©tudiant:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la recherche',
            details: error.message
        });
    }
});

// 3. R√©cup√©rer les fili√®res actives pour inscription
app.get('/api/inscription/filieres-actives', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT f.*, fac.nom as faculte_nom, fac.libelle as faculte_libelle
            FROM filieres f
            JOIN facultes fac ON f.faculte_id = fac.id
            WHERE f.active = true AND fac.active = true
            ORDER BY fac.nom, f.nom
        `);
        
        res.json({
            success: true,
            filieres: result.rows
        });
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration fili√®res:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la r√©cup√©ration des fili√®res'
        });
    }
});

// 4. V√©rifier le statut des inscriptions
app.get('/api/inscription/statut', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT * FROM config_inscriptions 
            WHERE annee_universitaire = '2024-2025'
            ORDER BY id DESC LIMIT 1
        `);
        
        if (result.rows.length === 0) {
            return res.json({
                success: true,
                ouvert: false,
                message: 'Les inscriptions ne sont pas encore configur√©es'
            });
        }
        
        const config = result.rows[0];
        const maintenant = new Date();
        
        let ouvert = config.ouvert;
        
        // V√©rifier les dates si d√©finies
        if (config.date_ouverture && new Date(config.date_ouverture) > maintenant) {
            ouvert = false;
        }
        
        if (config.date_fermeture && new Date(config.date_fermeture) < maintenant) {
            ouvert = false;
        }
        
        res.json({
            success: true,
            ouvert: ouvert,
            config: config
        });
        
    } catch (error) {
        console.error('‚ùå Erreur v√©rification statut:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la v√©rification du statut'
        });
    }
});

// 5. Valider une inscription
app.post('/api/inscription/valider', async (req, res) => {
    try {
        const {
            etudiant_id,
            filiere_id,
            niveau,
            mode_paiement,
            telephone_paiement,
            montant
        } = req.body;
        
        console.log('üìù Validation inscription pour √©tudiant:', etudiant_id);
        
        // V√©rifier que les inscriptions sont ouvertes
        const configResult = await pool.query(`
            SELECT * FROM config_inscriptions 
            WHERE annee_universitaire = '2024-2025' AND ouvert = true
            LIMIT 1
        `);
        
        if (configResult.rows.length === 0) {
            return res.status(403).json({
                success: false,
                error: 'Les inscriptions sont actuellement ferm√©es'
            });
        }
        
        // V√©rifier que l'√©tudiant existe et est autoris√©
        const etudiantResult = await pool.query(
            'SELECT * FROM etudiants WHERE id = $1 AND autorise_inscription = true',
            [etudiant_id]
        );
        
        if (etudiantResult.rows.length === 0) {
            return res.status(404).json({
                success: false,
                error: '√âtudiant non trouv√© ou non autoris√©'
            });
        }
        
        const etudiant = etudiantResult.rows[0];
        
        // G√©n√©rer une r√©f√©rence de paiement unique
        const referencePaiement = `INS${Date.now()}${Math.floor(Math.random() * 1000)}`;
        
        // G√©n√©rer un matricule pour les nouveaux √©tudiants
        let matricule = etudiant.matricule;
        if (!matricule) {
            const annee = new Date().getFullYear();
            const count = await pool.query(
                'SELECT COUNT(*) FROM etudiants WHERE matricule IS NOT NULL'
            );
            const numero = parseInt(count.rows[0].count) + 1;
            matricule = `${annee}UDH${numero.toString().padStart(4, '0')}`;
            
            // Mettre √† jour le matricule
            await pool.query(
                'UPDATE etudiants SET matricule = $1 WHERE id = $2',
                [matricule, etudiant_id]
            );
        }
        
        // Cr√©er l'inscription
        const inscriptionResult = await pool.query(
            `INSERT INTO inscriptions (
                etudiant_id, filiere_id, niveau, annee_universitaire,
                mode_paiement, telephone_paiement, montant,
                reference_paiement, statut_paiement, statut
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
            RETURNING *`,
            [
                etudiant_id,
                filiere_id,
                niveau,
                '2024-2025',
                mode_paiement,
                telephone_paiement,
                montant,
                referencePaiement,
                'en-attente',
                'en-cours'
            ]
        );
        
        console.log('‚úÖ Inscription cr√©√©e:', inscriptionResult.rows[0].id);
        
        res.json({
            success: true,
            message: 'Inscription enregistr√©e avec succ√®s',
            inscription: inscriptionResult.rows[0],
            matricule: matricule,
            reference_paiement: referencePaiement
        });
        
    } catch (error) {
        console.error('‚ùå Erreur validation inscription:', error);
        
        if (error.code === '23505') { // Contrainte unique
            return res.status(400).json({
                success: false,
                error: 'Vous √™tes d√©j√† inscrit pour cette fili√®re et ce niveau'
            });
        }
        
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la validation de l\'inscription',
            details: error.message
        });
    }
});

// =================== ROUTES ADMIN POUR LES INSCRIPTIONS ===================

// 6. Ouvrir/Fermer les inscriptions
app.post('/api/admin/inscription/toggle', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const {
            ouvert,
            filiere_id,
            niveau,
            date_ouverture,
            date_fermeture
        } = req.body;
        
        console.log('üîß Configuration inscriptions:', { ouvert, filiere_id, niveau });
        
        // V√©rifier si une config existe d√©j√†
        const existingConfig = await pool.query(`
            SELECT * FROM config_inscriptions 
            WHERE annee_universitaire = '2024-2025'
            ORDER BY id DESC LIMIT 1
        `);
        
        let result;
        
        if (existingConfig.rows.length > 0) {
            // Mettre √† jour
            result = await pool.query(
                `UPDATE config_inscriptions 
                 SET ouvert = $1, filiere_id = $2, niveau = $3,
                     date_ouverture = $4, date_fermeture = $5, updated_at = NOW()
                 WHERE id = $6
                 RETURNING *`,
                [ouvert, filiere_id, niveau, date_ouverture, date_fermeture, existingConfig.rows[0].id]
            );
        } else {
            // Cr√©er
            result = await pool.query(
                `INSERT INTO config_inscriptions (
                    annee_universitaire, ouvert, filiere_id, niveau,
                    date_ouverture, date_fermeture
                ) VALUES ($1, $2, $3, $4, $5, $6)
                RETURNING *`,
                ['2024-2025', ouvert, filiere_id, niveau, date_ouverture, date_fermeture]
            );
        }
        
        res.json({
            success: true,
            message: `Inscriptions ${ouvert ? 'ouvertes' : 'ferm√©es'}`,
            config: result.rows[0]
        });
        
    } catch (error) {
        console.error('‚ùå Erreur toggle inscriptions:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la configuration',
            details: error.message
        });
    }
});

// 7. Importer les √©tudiants autoris√©s (CSV/Excel)
app.post('/api/admin/inscription/import-autorises', authenticateToken, requireAdmin, upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({
                success: false,
                error: 'Aucun fichier fourni'
            });
        }
        
        console.log('üìÅ Import fichier:', req.file.originalname);
        
        const filePath = req.file.path;
        const ext = path.extname(req.file.originalname).toLowerCase();
        
        let data = [];
        
        if (ext === '.csv') {
            // Lire CSV
            const fileContent = fs.readFileSync(filePath, 'utf8');
            const lines = fileContent.split('\n').filter(line => line.trim());
            const headers = lines[0].split(',').map(h => h.trim());
            
            for (let i = 1; i < lines.length; i++) {
                const values = lines[i].split(',').map(v => v.trim());
                const row = {};
                headers.forEach((header, index) => {
                    row[header] = values[index];
                });
                data.push(row);
            }
        } else if (ext === '.xlsx') {
            // Lire Excel
            const ExcelJS = require('exceljs');
            const workbook = new ExcelJS.Workbook();
            await workbook.xlsx.readFile(filePath);
            
            const worksheet = workbook.getWorksheet(1);
            const headers = [];
            
            worksheet.getRow(1).eachCell((cell) => {
                headers.push(cell.value);
            });
            
            worksheet.eachRow((row, rowNumber) => {
                if (rowNumber > 1) {
                    const rowData = {};
                    row.eachCell((cell, colNumber) => {
                        rowData[headers[colNumber - 1]] = cell.value;
                    });
                    data.push(rowData);
                }
            });
        } else {
            return res.status(400).json({
                success: false,
                error: 'Format de fichier non support√©. Utilisez CSV ou XLSX'
            });
        }
        
        console.log(`üìä ${data.length} lignes √† importer`);
        
        let imported = 0;
        let errors = [];
        
        for (const row of data) {
            try {
                // Chercher par matricule ou numero_dossier
                const identifier = row.matricule || row.numero_dossier;
                
                if (!identifier) {
                    errors.push(`Ligne sans identifiant: ${JSON.stringify(row)}`);
                    continue;
                }
                
                const result = await pool.query(
                    `UPDATE etudiants 
                     SET autorise_inscription = true
                     WHERE matricule = $1 OR numero_dossier = $1`,
                    [identifier]
                );
                
                if (result.rowCount > 0) {
                    imported++;
                } else {
                    errors.push(`√âtudiant non trouv√©: ${identifier}`);
                }
            } catch (error) {
                errors.push(`Erreur pour ${row.matricule || row.numero_dossier}: ${error.message}`);
            }
        }
        
        // Supprimer le fichier temporaire
        fs.unlinkSync(filePath);
        
        res.json({
            success: true,
            message: `${imported} √©tudiant(s) autoris√©(s)`,
            imported: imported,
            errors: errors.length > 0 ? errors : undefined
        });
        
    } catch (error) {
        console.error('‚ùå Erreur import:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de l\'import',
            details: error.message
        });
    }
});

// 8. Exporter les inscriptions
app.get('/api/admin/inscription/export', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { statut, filiere_id, niveau } = req.query;
        
        console.log('üìä Export inscriptions:', { statut, filiere_id, niveau });
        
        let query = `
            SELECT 
                i.id,
                i.reference_paiement,
                e.matricule,
                e.numero_dossier,
                e.nom,
                e.prenom,
                e.date_naissance,
                e.email,
                e.telephone,
                e.genre,
                i.niveau,
                f.nom as filiere,
                f.libelle as filiere_libelle,
                fac.nom as faculte,
                i.montant,
                i.mode_paiement,
                i.telephone_paiement,
                i.statut_paiement,
                i.statut as statut_inscription,
                TO_CHAR(i.created_at, 'DD/MM/YYYY HH24:MI') as date_inscription
            FROM inscriptions i
            JOIN etudiants e ON i.etudiant_id = e.id
            JOIN filieres f ON i.filiere_id = f.id
            JOIN facultes fac ON f.faculte_id = fac.id
            WHERE 1=1
        `;
        
        const params = [];
        
        if (statut) {
            params.push(statut);
            query += ` AND i.statut = $${params.length}`;
        }
        
        if (filiere_id) {
            params.push(filiere_id);
            query += ` AND i.filiere_id = $${params.length}`;
        }
        
        if (niveau) {
            params.push(niveau);
            query += ` AND i.niveau = $${params.length}`;
        }
        
        query += ' ORDER BY i.created_at DESC';
        
        const result = await pool.query(query, params);
        
        // Cr√©er Excel
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Inscriptions');
        
        worksheet.columns = [
            { header: 'R√âF√âRENCE', key: 'reference_paiement', width: 20 },
            { header: 'MATRICULE', key: 'matricule', width: 15 },
            { header: 'N¬∞ DOSSIER', key: 'numero_dossier', width: 15 },
            { header: 'NOM', key: 'nom', width: 20 },
            { header: 'PR√âNOM', key: 'prenom', width: 20 },
            { header: 'DATE NAISSANCE', key: 'date_naissance', width: 15 },
            { header: 'EMAIL', key: 'email', width: 25 },
            { header: 'T√âL√âPHONE', key: 'telephone', width: 15 },
            { header: 'GENRE', key: 'genre', width: 12 },
            { header: 'NIVEAU', key: 'niveau', width: 10 },
            { header: 'FILI√àRE', key: 'filiere', width: 20 },
            { header: 'FILI√àRE LIBELL√â', key: 'filiere_libelle', width: 30 },
            { header: 'FACULT√â', key: 'faculte', width: 15 },
            { header: 'MONTANT', key: 'montant', width: 12 },
            { header: 'MODE PAIEMENT', key: 'mode_paiement', width: 15 },
            { header: 'T√âL. PAIEMENT', key: 'telephone_paiement', width: 15 },
            { header: 'STATUT PAIEMENT', key: 'statut_paiement', width: 15 },
            { header: 'STATUT INSCRIPTION', key: 'statut_inscription', width: 18 },
            { header: 'DATE INSCRIPTION', key: 'date_inscription', width: 18 }
        ];
        
        // Style en-t√™te
        worksheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
        worksheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '667eea' }
        };
        
        // Ajouter les donn√©es
        result.rows.forEach(row => {
            worksheet.addRow(row);
        });
        
        const filename = `Inscriptions_${new Date().toISOString().split('T')[0]}.xlsx`;
        
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        await workbook.xlsx.write(res);
        res.end();
        
        console.log(`‚úÖ Export de ${result.rows.length} inscriptions`);
        
    } catch (error) {
        console.error('‚ùå Erreur export inscriptions:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de l\'export',
            details: error.message
        });
    }
});

// =================== GESTION DES AUTORISATIONS D'INSCRIPTION ===================

// R√©cup√©rer tous les √©tudiants autoris√©s avec filtres
app.get('/api/admin/etudiants/autorises', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { type, filiere_id, niveau, search } = req.query;
        
        let query = `
            SELECT 
                e.id,
                e.matricule,
                e.numero_dossier,
                e.nom,
                e.prenom,
                e.email,
                e.telephone,
                e.type,
                e.niveau,
                e.autorise_inscription,
                f.nom as filiere_nom,
                f.libelle as filiere_libelle,
                fac.nom as faculte_nom,
                ae.autorise as autorise_annee,
                ae.raison_blocage,
                TO_CHAR(e.created_at, 'DD/MM/YYYY') as date_inscription
            FROM etudiants e
            LEFT JOIN filieres f ON e.filiere_id = f.id
            LEFT JOIN facultes fac ON f.faculte_id = fac.id
            LEFT JOIN autorisations_etudiants ae ON e.id = ae.etudiant_id 
                AND ae.annee_universitaire = '2024-2025'
            WHERE 1=1
        `;
        
        const params = [];
        
        if (type) {
            params.push(type);
            query += ` AND e.type = $${params.length}`;
        }
        
        if (filiere_id) {
            params.push(filiere_id);
            query += ` AND e.filiere_id = $${params.length}`;
        }
        
        if (niveau) {
            params.push(niveau);
            query += ` AND e.niveau = $${params.length}`;
        }
        
        if (search) {
            params.push(`%${search}%`);
            query += ` AND (
                e.nom ILIKE $${params.length} OR 
                e.prenom ILIKE $${params.length} OR 
                e.matricule ILIKE $${params.length} OR 
                e.numero_dossier ILIKE $${params.length}
            )`;
        }
        
        query += ' ORDER BY e.nom, e.prenom';
        
        const result = await pool.query(query, params);
        
        res.json({
            success: true,
            etudiants: result.rows,
            total: result.rows.length
        });
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration √©tudiants:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la r√©cup√©ration des √©tudiants'
        });
    }
});

// Modifier l'autorisation globale d'un √©tudiant
app.post('/api/admin/etudiants/:id/toggle-autorisation', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { autorise } = req.body;
        
        await pool.query(
            'UPDATE etudiants SET autorise_inscription = $1, updated_at = NOW() WHERE id = $2',
            [autorise, id]
        );
        
        res.json({
            success: true,
            message: `√âtudiant ${autorise ? 'autoris√©' : 'bloqu√©'} avec succ√®s`
        });
        
    } catch (error) {
        console.error('‚ùå Erreur toggle autorisation:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la modification'
        });
    }
});

// Bloquer/D√©bloquer un √©tudiant pour l'ann√©e en cours
app.post('/api/admin/etudiants/:id/toggle-autorisation-annee', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { autorise, raison_blocage } = req.body;
        
        const result = await pool.query(
            `INSERT INTO autorisations_etudiants (
                etudiant_id, annee_universitaire, autorise, raison_blocage, bloque_par, date_blocage
            ) VALUES ($1, '2024-2025', $2, $3, $4, NOW())
            ON CONFLICT (etudiant_id, annee_universitaire) 
            DO UPDATE SET 
                autorise = $2, 
                raison_blocage = $3, 
                bloque_par = $4, 
                date_blocage = NOW()
            RETURNING *`,
            [id, autorise, raison_blocage || null, req.user.id]
        );
        
        res.json({
            success: true,
            message: `√âtudiant ${autorise ? 'autoris√©' : 'bloqu√©'} pour l'ann√©e 2024-2025`,
            autorisation: result.rows[0]
        });
        
    } catch (error) {
        console.error('‚ùå Erreur toggle autorisation ann√©e:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la modification'
        });
    }
});

// Configurer les autorisations par type/fili√®re/niveau
app.post('/api/admin/inscription/config-autorisations', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const {
            type_autorisation, // 'tous', 'nouveaux', 'anciens', 'filiere', 'niveau'
            filieres_autorisees,
            niveaux_autorises
        } = req.body;
        
        console.log('üîß Configuration autorisations:', { type_autorisation, filieres_autorisees, niveaux_autorises });
        
        // Mettre √† jour la config
        const result = await pool.query(
            `INSERT INTO config_inscriptions (
                annee_universitaire, ouvert, type_autorisation, 
                filieres_autorisees, niveaux_autorises
            ) VALUES ('2024-2025', true, $1, $2, $3)
            ON CONFLICT (annee_universitaire) 
            DO UPDATE SET 
                type_autorisation = $1,
                filieres_autorisees = $2,
                niveaux_autorises = $3,
                updated_at = NOW()
            RETURNING *`,
            [
                type_autorisation,
                filieres_autorisees || null,
                niveaux_autorises || null
            ]
        );
        
        res.json({
            success: true,
            message: 'Configuration des autorisations mise √† jour',
            config: result.rows[0]
        });
        
    } catch (error) {
        console.error('‚ùå Erreur config autorisations:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la configuration'
        });
    }
});

// Autorisation massive par fili√®re
app.post('/api/admin/inscription/autoriser-filiere', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { filiere_id, niveaux, autorise } = req.body;
        
        let query = `
            UPDATE etudiants 
            SET autorise_inscription = $1, updated_at = NOW()
            WHERE filiere_id = $2
        `;
        
        const params = [autorise, filiere_id];
        
        if (niveaux && niveaux.length > 0) {
            query += ` AND niveau = ANY($3)`;
            params.push(niveaux);
        }
        
        const result = await pool.query(query, params);
        
        res.json({
            success: true,
            message: `${result.rowCount} √©tudiant(s) ${autorise ? 'autoris√©(s)' : 'bloqu√©(s)'}`,
            count: result.rowCount
        });
        
    } catch (error) {
        console.error('‚ùå Erreur autorisation fili√®re:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de l\'autorisation'
        });
    }
});

// Autorisation massive par niveau
app.post('/api/admin/inscription/autoriser-niveau', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { niveau, autorise } = req.body;
        
        const result = await pool.query(
            `UPDATE etudiants 
             SET autorise_inscription = $1, updated_at = NOW()
             WHERE niveau = $2`,
            [autorise, niveau]
        );
        
        res.json({
            success: true,
            message: `${result.rowCount} √©tudiant(s) de niveau ${niveau} ${autorise ? 'autoris√©(s)' : 'bloqu√©(s)'}`,
            count: result.rowCount
        });
        
    } catch (error) {
        console.error('‚ùå Erreur autorisation niveau:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de l\'autorisation'
        });
    }
});

// Autorisation massive par type (nouveau/ancien)
app.post('/api/admin/inscription/autoriser-type', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { type, autorise } = req.body;
        
        const result = await pool.query(
            `UPDATE etudiants 
             SET autorise_inscription = $1, updated_at = NOW()
             WHERE type = $2`,
            [autorise, type]
        );
        
        res.json({
            success: true,
            message: `${result.rowCount} √©tudiant(s) ${type}s ${autorise ? 'autoris√©(s)' : 'bloqu√©(s)'}`,
            count: result.rowCount
        });
        
    } catch (error) {
        console.error('‚ùå Erreur autorisation type:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de l\'autorisation'
        });
    }
});

// V√©rifier si un √©tudiant est autoris√© √† s'inscrire
app.get('/api/inscription/verifier-autorisation/:etudiant_id', async (req, res) => {
    try {
        const { etudiant_id } = req.params;
        
        // R√©cup√©rer l'√©tudiant
        const etudiantResult = await pool.query(
            'SELECT * FROM etudiants WHERE id = $1',
            [etudiant_id]
        );
        
        if (etudiantResult.rows.length === 0) {
            return res.status(404).json({
                success: false,
                error: '√âtudiant non trouv√©'
            });
        }
        
        const etudiant = etudiantResult.rows[0];
        
        // V√©rifier autorisation globale
        if (!etudiant.autorise_inscription) {
            return res.json({
                success: false,
                autorise: false,
                raison: 'Votre compte est bloqu√© pour les inscriptions'
            });
        }
        
        // V√©rifier autorisation pour l'ann√©e
        const autorisationAnneeResult = await pool.query(
            `SELECT * FROM autorisations_etudiants 
             WHERE etudiant_id = $1 AND annee_universitaire = '2024-2025'`,
            [etudiant_id]
        );
        
        if (autorisationAnneeResult.rows.length > 0) {
            const autoAnnee = autorisationAnneeResult.rows[0];
            if (!autoAnnee.autorise) {
                return res.json({
                    success: false,
                    autorise: false,
                    raison: autoAnnee.raison_blocage || 'Vous n\'√™tes pas autoris√© √† vous inscrire cette ann√©e'
                });
            }
        }
        
        // V√©rifier la configuration globale
        const configResult = await pool.query(
            `SELECT * FROM config_inscriptions 
             WHERE annee_universitaire = '2024-2025' AND ouvert = true
             LIMIT 1`
        );
        
        if (configResult.rows.length === 0) {
            return res.json({
                success: false,
                autorise: false,
                raison: 'Les inscriptions sont ferm√©es'
            });
        }
        
        const config = configResult.rows[0];
        
        // V√©rifier selon le type d'autorisation
        switch (config.type_autorisation) {
            case 'nouveaux':
                if (etudiant.type !== 'nouveau') {
                    return res.json({
                        success: false,
                        autorise: false,
                        raison: 'Seuls les nouveaux √©tudiants peuvent s\'inscrire actuellement'
                    });
                }
                break;
                
            case 'anciens':
                if (etudiant.type !== 'ancien') {
                    return res.json({
                        success: false,
                        autorise: false,
                        raison: 'Seuls les anciens √©tudiants peuvent s\'inscrire actuellement'
                    });
                }
                break;
                
            case 'filiere':
                if (config.filieres_autorisees && !config.filieres_autorisees.includes(etudiant.filiere_id)) {
                    return res.json({
                        success: false,
                        autorise: false,
                        raison: 'Votre fili√®re n\'est pas autoris√©e √† s\'inscrire actuellement'
                    });
                }
                break;
                
            case 'niveau':
                if (config.niveaux_autorises && !config.niveaux_autorises.includes(etudiant.niveau)) {
                    return res.json({
                        success: false,
                        autorise: false,
                        raison: 'Votre niveau n\'est pas autoris√© √† s\'inscrire actuellement'
                    });
                }
                break;
        }
        
        res.json({
            success: true,
            autorise: true,
            etudiant: etudiant
        });
        
    } catch (error) {
        console.error('‚ùå Erreur v√©rification autorisation:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la v√©rification'
        });
    }
});
// =================== EXPORT DES INSCRIPTIONS ===================

// Exporter tous les √©tudiants inscrits
app.get('/api/admin/inscription/export-inscrits', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { annee_universitaire, statut, filiere_id, niveau } = req.query;
        
        console.log('üìä Export √©tudiants inscrits');
        
        let query = `
            SELECT 
                i.id as inscription_id,
                i.reference_paiement,
                e.matricule,
                e.numero_dossier,
                e.nom,
                e.prenom,
                e.date_naissance,
                e.lieu_naissance,
                e.email,
                e.telephone,
                e.genre,
                e.nationalite,
                e.type as type_etudiant,
                i.niveau,
                f.nom as filiere_code,
                f.libelle as filiere_libelle,
                fac.nom as faculte_code,
                fac.libelle as faculte_libelle,
                i.annee_universitaire,
                i.montant,
                i.mode_paiement,
                i.telephone_paiement,
                i.statut_paiement,
                i.statut as statut_inscription,
                TO_CHAR(i.created_at, 'DD/MM/YYYY HH24:MI') as date_inscription,
                TO_CHAR(i.date_validation, 'DD/MM/YYYY HH24:MI') as date_validation,
                u.nom as valide_par
            FROM inscriptions i
            JOIN etudiants e ON i.etudiant_id = e.id
            JOIN filieres f ON i.filiere_id = f.id
            JOIN facultes fac ON f.faculte_id = fac.id
            LEFT JOIN users u ON i.valide_par = u.id
            WHERE 1=1
        `;
        
        const params = [];
        
        if (annee_universitaire) {
            params.push(annee_universitaire);
            query += ` AND i.annee_universitaire = $${params.length}`;
        } else {
            query += ` AND i.annee_universitaire = '2024-2025'`;
        }
        
        if (statut) {
            params.push(statut);
            query += ` AND i.statut = $${params.length}`;
        }
        
        if (filiere_id) {
            params.push(filiere_id);
            query += ` AND i.filiere_id = $${params.length}`;
        }
        
        if (niveau) {
            params.push(niveau);
            query += ` AND i.niveau = $${params.length}`;
        }
        
        query += ' ORDER BY fac.nom, f.nom, e.nom, e.prenom';
        
        const result = await pool.query(query, params);
        
        console.log(`‚úÖ ${result.rows.length} inscriptions trouv√©es`);
        
        // Cr√©er le fichier Excel
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        
        // Onglet 1: Liste compl√®te
        const worksheet = workbook.addWorksheet('Inscriptions');
        
        worksheet.columns = [
            { header: 'ID INSCRIPTION', key: 'inscription_id', width: 12 },
            { header: 'R√âF√âRENCE', key: 'reference_paiement', width: 20 },
            { header: 'MATRICULE', key: 'matricule', width: 15 },
            { header: 'N¬∞ DOSSIER', key: 'numero_dossier', width: 15 },
            { header: 'NOM', key: 'nom', width: 20 },
            { header: 'PR√âNOM', key: 'prenom', width: 20 },
            { header: 'DATE NAISSANCE', key: 'date_naissance', width: 15 },
            { header: 'LIEU NAISSANCE', key: 'lieu_naissance', width: 20 },
            { header: 'EMAIL', key: 'email', width: 30 },
            { header: 'T√âL√âPHONE', key: 'telephone', width: 15 },
            { header: 'GENRE', key: 'genre', width: 12 },
            { header: 'NATIONALIT√â', key: 'nationalite', width: 15 },
            { header: 'TYPE', key: 'type_etudiant', width: 12 },
            { header: 'NIVEAU', key: 'niveau', width: 10 },
            { header: 'CODE FILI√àRE', key: 'filiere_code', width: 15 },
            { header: 'FILI√àRE', key: 'filiere_libelle', width: 35 },
            { header: 'CODE FACULT√â', key: 'faculte_code', width: 12 },
            { header: 'FACULT√â', key: 'faculte_libelle', width: 40 },
            { header: 'ANN√âE UNIV.', key: 'annee_universitaire', width: 12 },
            { header: 'MONTANT', key: 'montant', width: 12 },
            { header: 'MODE PAIEMENT', key: 'mode_paiement', width: 15 },
            { header: 'T√âL. PAIEMENT', key: 'telephone_paiement', width: 15 },
            { header: 'STATUT PAIEMENT', key: 'statut_paiement', width: 18 },
            { header: 'STATUT INSCRIPTION', key: 'statut_inscription', width: 18 },
            { header: 'DATE INSCRIPTION', key: 'date_inscription', width: 18 },
            { header: 'DATE VALIDATION', key: 'date_validation', width: 18 },
            { header: 'VALID√â PAR', key: 'valide_par', width: 25 }
        ];
        
        // Style en-t√™te
        worksheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
        worksheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '667eea' }
        };
        worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };
        
        // Ajouter les donn√©es
        result.rows.forEach(row => {
            worksheet.addRow(row);
        });
        
        // Onglet 2: Statistiques par fili√®re
        const statsSheet = workbook.addWorksheet('Statistiques par Fili√®re');
        
        const statsQuery = await pool.query(`
            SELECT 
                fac.libelle as faculte,
                f.libelle as filiere,
                i.niveau,
                COUNT(*) as total_inscrits,
                SUM(CASE WHEN i.statut = 'valid√©e' THEN 1 ELSE 0 END) as valides,
                SUM(CASE WHEN e.genre = 'masculin' THEN 1 ELSE 0 END) as hommes,
                SUM(CASE WHEN e.genre = 'feminin' THEN 1 ELSE 0 END) as femmes
            FROM inscriptions i
            JOIN etudiants e ON i.etudiant_id = e.id
            JOIN filieres f ON i.filiere_id = f.id
            JOIN facultes fac ON f.faculte_id = fac.id
            WHERE i.annee_universitaire = '2024-2025'
            GROUP BY fac.libelle, f.libelle, i.niveau
            ORDER BY fac.libelle, f.libelle, i.niveau
        `);
        
        statsSheet.columns = [
            { header: 'FACULT√â', key: 'faculte', width: 40 },
            { header: 'FILI√àRE', key: 'filiere', width: 35 },
            { header: 'NIVEAU', key: 'niveau', width: 10 },
            { header: 'TOTAL INSCRITS', key: 'total_inscrits', width: 15 },
            { header: 'VALID√âS', key: 'valides', width: 12 },
            { header: 'HOMMES', key: 'hommes', width: 12 },
            { header: 'FEMMES', key: 'femmes', width: 12 }
        ];
        
        statsSheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
        statsSheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '28a745' }
        };
        
        statsQuery.rows.forEach(row => {
            statsSheet.addRow(row);
        });
        
        // G√©n√©rer le fichier
        const filename = `Inscriptions_${annee_universitaire || '2024-2025'}_${new Date().toISOString().split('T')[0]}.xlsx`;
        
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        await workbook.xlsx.write(res);
        res.end();
        
        console.log(`‚úÖ Export g√©n√©r√©: ${filename}`);
        
    } catch (error) {
        console.error('‚ùå Erreur export inscriptions:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de l\'export',
            details: error.message
        });
    }
});

// =================== MOD√àLE D'IMPORT ===================

// T√©l√©charger le mod√®le d'import pour les √©tudiants autoris√©s
app.get('/api/admin/inscription/modele-import', authenticateToken, requireAdmin, async (req, res) => {
    try {
        console.log('üì• G√©n√©ration mod√®le d\'import');
        
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        
        // Onglet 1: Instructions
        const instructionsSheet = workbook.addWorksheet('Instructions');
        
        instructionsSheet.mergeCells('A1:D1');
        instructionsSheet.getCell('A1').value = 'MOD√àLE D\'IMPORT - √âTUDIANTS AUTORIS√âS';
        instructionsSheet.getCell('A1').font = { size: 16, bold: true, color: { argb: '667eea' } };
        instructionsSheet.getCell('A1').alignment = { horizontal: 'center', vertical: 'middle' };
        
        instructionsSheet.getRow(3).values = ['INSTRUCTIONS D\'UTILISATION'];
        instructionsSheet.getRow(3).font = { bold: true, size: 14 };
        
        const instructions = [
            '',
            '1. Remplissez l\'onglet "Etudiants" avec les donn√©es des √©tudiants √† autoriser',
            '',
            '2. COLONNES OBLIGATOIRES:',
            '   - Soit MATRICULE (pour anciens √©tudiants)',
            '   - Soit NUMERO_DOSSIER (pour nouveaux √©tudiants)',
            '',
            '3. COLONNES OPTIONNELLES:',
            '   - NIVEAU: L1, L2, L3, M1, M2',
            '   - FILIERE_CODE: Code de la fili√®re (ex: INFORMATIQUE)',
            '   - AUTORISE: OUI ou NON (par d√©faut: OUI)',
            '',
            '4. FORMAT:',
            '   - Une ligne par √©tudiant',
            '   - Ne pas modifier les en-t√™tes',
            '   - Pas de lignes vides entre les donn√©es',
            '',
            '5. EXEMPLES:',
            '   Ligne 1: 2023UDH0001 | | L2 | INFORMATIQUE | OUI',
            '   Ligne 2: | UDH123456 | L1 | MATHEMATIQUES | OUI',
            '',
            '6. Apr√®s remplissage, enregistrez et importez le fichier dans l\'interface admin'
        ];
        
        instructions.forEach((instruction, index) => {
            instructionsSheet.getCell(`A${index + 4}`).value = instruction;
        });
        
        instructionsSheet.getColumn('A').width = 80;
        
        // Onglet 2: Mod√®le √† remplir
        const modelSheet = workbook.addWorksheet('Etudiants');
        
        modelSheet.columns = [
            { header: 'MATRICULE', key: 'matricule', width: 20 },
            { header: 'NUMERO_DOSSIER', key: 'numero_dossier', width: 20 },
            { header: 'NIVEAU', key: 'niveau', width: 12 },
            { header: 'FILIERE_CODE', key: 'filiere_code', width: 20 },
            { header: 'AUTORISE', key: 'autorise', width: 12 }
        ];
        
        // Style en-t√™te
        modelSheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
        modelSheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '667eea' }
        };
        modelSheet.getRow(1).alignment = { horizontal: 'center', vertical: 'middle' };
        
        // Exemples
        modelSheet.addRow({
            matricule: '2023UDH0001',
            numero_dossier: '',
            niveau: 'L2',
            filiere_code: 'INFORMATIQUE',
            autorise: 'OUI'
        });
        
        modelSheet.addRow({
            matricule: '',
            numero_dossier: 'UDH123456',
            niveau: 'L1',
            filiere_code: 'MATHEMATIQUES',
            autorise: 'OUI'
        });
        
        // Style des exemples (gris clair)
        [2, 3].forEach(rowNum => {
            modelSheet.getRow(rowNum).eachCell(cell => {
                cell.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: 'F8F9FA' }
                };
                cell.font = { italic: true, color: { argb: '666666' } };
            });
        });
        
        // Onglet 3: Liste des fili√®res
        const filieresSheet = workbook.addWorksheet('Liste Fili√®res');
        
        const filieresResult = await pool.query(`
            SELECT f.nom as code, f.libelle, fac.nom as faculte
            FROM filieres f
            JOIN facultes fac ON f.faculte_id = fac.id
            WHERE f.active = true
            ORDER BY fac.nom, f.nom
        `);
        
        filieresSheet.columns = [
            { header: 'CODE FILI√àRE', key: 'code', width: 20 },
            { header: 'LIBELL√â', key: 'libelle', width: 40 },
            { header: 'FACULT√â', key: 'faculte', width: 15 }
        ];
        
        filieresSheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
        filieresSheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '28a745' }
        };
        
        filieresResult.rows.forEach(row => {
            filieresSheet.addRow(row);
        });
        
        // G√©n√©rer le fichier
        const filename = 'Modele_Import_Etudiants_Autorises.xlsx';
        
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        await workbook.xlsx.write(res);
        res.end();
        
        console.log('‚úÖ Mod√®le g√©n√©r√©');
        
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©ration mod√®le:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la g√©n√©ration du mod√®le'
        });
    }
});

// =================== IMPORT DES √âTUDIANTS AUTORIS√âS ===================

app.post('/api/admin/inscription/import-autorises-excel', authenticateToken, requireAdmin, upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({
                success: false,
                error: 'Aucun fichier fourni'
            });
        }
        
        console.log('üì• Import fichier:', req.file.originalname);
        
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        await workbook.xlsx.readFile(req.file.path);
        
        const worksheet = workbook.getWorksheet('Etudiants');
        
        if (!worksheet) {
            fs.unlinkSync(req.file.path);
            return res.status(400).json({
                success: false,
                error: 'Onglet "Etudiants" non trouv√© dans le fichier'
            });
        }
        
        const data = [];
        const headers = [];
        
        // Lire les en-t√™tes
        worksheet.getRow(1).eachCell((cell, colNumber) => {
            headers[colNumber] = cell.value;
        });
        
        // Lire les donn√©es
        worksheet.eachRow((row, rowNumber) => {
            if (rowNumber > 1) { // Ignorer l'en-t√™te
                const rowData = {};
                row.eachCell((cell, colNumber) => {
                    const header = headers[colNumber];
                    rowData[header] = cell.value;
                });
                
                // Ignorer les lignes vides
                if (rowData.MATRICULE || rowData.NUMERO_DOSSIER) {
                    data.push(rowData);
                }
            }
        });
        
        console.log(`üìä ${data.length} lignes √† traiter`);
        
        let imported = 0;
        let updated = 0;
        let errors = [];
        
        for (const row of data) {
            try {
                const matricule = row.MATRICULE ? String(row.MATRICULE).trim() : null;
                const numeroDossier = row.NUMERO_DOSSIER ? String(row.NUMERO_DOSSIER).trim() : null;
                const niveau = row.NIVEAU ? String(row.NIVEAU).trim().toUpperCase() : null;
                const filiereCode = row.FILIERE_CODE ? String(row.FILIERE_CODE).trim().toUpperCase() : null;
                const autorise = !row.AUTORISE || String(row.AUTORISE).trim().toUpperCase() === 'OUI';
                
                if (!matricule && !numeroDossier) {
                    errors.push(`Ligne sans matricule ni num√©ro de dossier`);
                    continue;
                }
                
                // Trouver l'√©tudiant
                let query = 'SELECT id, matricule, numero_dossier FROM etudiants WHERE ';
                const params = [];
                
                if (matricule) {
                    params.push(matricule);
                    query += `matricule = $1`;
                } else {
                    params.push(numeroDossier);
                    query += `numero_dossier = $1`;
                }
                
                const result = await pool.query(query, params);
                
                if (result.rows.length === 0) {
                    errors.push(`√âtudiant non trouv√©: ${matricule || numeroDossier}`);
                    continue;
                }
                
                const etudiant = result.rows[0];
                
                // Mettre √† jour l'√©tudiant
                const updateFields = ['autorise_inscription = $2'];
                const updateParams = [etudiant.id, autorise];
                let paramIndex = 3;
                
                if (niveau) {
                    updateFields.push(`niveau = $${paramIndex}`);
                    updateParams.push(niveau);
                    paramIndex++;
                }
                
                if (filiereCode) {
                    // Trouver l'ID de la fili√®re
                    const filiereResult = await pool.query(
                        'SELECT id FROM filieres WHERE nom = $1',
                        [filiereCode]
                    );
                    
                    if (filiereResult.rows.length > 0) {
                        updateFields.push(`filiere_id = $${paramIndex}`);
                        updateParams.push(filiereResult.rows[0].id);
                        paramIndex++;
                    } else {
                        errors.push(`Fili√®re inconnue: ${filiereCode} pour ${matricule || numeroDossier}`);
                    }
                }
                
                const updateQuery = `
                    UPDATE etudiants 
                    SET ${updateFields.join(', ')}, updated_at = NOW()
                    WHERE id = $1
                `;
                
                await pool.query(updateQuery, updateParams);
                
                if (autorise) {
                    imported++;
                } else {
                    updated++;
                }
                
            } catch (error) {
                errors.push(`Erreur pour ${row.MATRICULE || row.NUMERO_DOSSIER}: ${error.message}`);
            }
        }
        
        // Supprimer le fichier temporaire
        fs.unlinkSync(req.file.path);
        
        res.json({
            success: true,
            message: `Import termin√©: ${imported} autoris√©(s), ${updated} bloqu√©(s)`,
            imported: imported,
            updated: updated,
            errors: errors.length > 0 ? errors : undefined,
            total_processed: data.length
        });
        
        console.log(`‚úÖ Import termin√©: ${imported} autoris√©s, ${updated} bloqu√©s, ${errors.length} erreurs`);
        
    } catch (error) {
        console.error('‚ùå Erreur import:', error);
        
        if (req.file && fs.existsSync(req.file.path)) {
            fs.unlinkSync(req.file.path);
        }
        
        res.status(500).json({
            success: false,
            error: 'Erreur lors de l\'import',
            details: error.message
        });
    }
});

// =================== IMPORT D'√âTUDIANTS DANS LA TABLE ETUDIANTS ===================

// T√©l√©charger le mod√®le d'import pour les √©tudiants
app.get('/api/admin/etudiants/modele-import', authenticateToken, requireAdmin, async (req, res) => {
    try {
        console.log('G√©n√©ration mod√®le import √©tudiants');
        
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        
        // Onglet 1: Instructions
        const instructionsSheet = workbook.addWorksheet('Instructions');
        
        instructionsSheet.mergeCells('A1:F1');
        instructionsSheet.getCell('A1').value = 'MOD√àLE D\'IMPORT - √âTUDIANTS';
        instructionsSheet.getCell('A1').font = { size: 16, bold: true, color: { argb: '667eea' } };
        instructionsSheet.getCell('A1').alignment = { horizontal: 'center', vertical: 'middle' };
        instructionsSheet.getRow(1).height = 30;
        
        instructionsSheet.getRow(3).values = ['INSTRUCTIONS D\'UTILISATION'];
        instructionsSheet.getRow(3).font = { bold: true, size: 14, color: { argb: '667eea' } };
        
        const instructions = [
            '',
            '1. REMPLISSEZ L\'ONGLET "Etudiants" AVEC LES DONN√âES',
            '',
            '2. COLONNES OBLIGATOIRES (marqu√©es *):',
            '   - NOM* : Nom de famille',
            '   - PRENOM* : Pr√©nom(s)',
            '   - DATE_NAISSANCE* : Format JJ/MM/AAAA (ex: 15/03/2000)',
            '   - LIEU_NAISSANCE* : Ville de naissance',
            '   - EMAIL* : Adresse email unique',
            '   - TELEPHONE* : Num√©ro de t√©l√©phone unique',
            '   - GENRE* : masculin ou feminin',
            '   - NATIONALITE* : Ex: nigerienne',
            '   - ADRESSE* : Adresse compl√®te',
            '',
            '3. COLONNES OPTIONNELLES:',
            '   - MATRICULE : Matricule existant (si ancien √©tudiant)',
            '   - NUMERO_DOSSIER : Num√©ro de dossier de candidature',
            '   - TYPE : nouveau ou ancien (d√©faut: nouveau)',
            '   - NIVEAU : L1, L2, L3, M1, M2',
            '   - FILIERE_CODE : Code de la fili√®re (voir onglet "Liste Fili√®res")',
            '   - TYPE_BAC : BAC A, BAC C, BAC D, BAC G',
            '   - LIEU_OBTENTION : Ville d\'obtention du bac',
            '   - ANNEE_OBTENTION : Ex: 2024-2025',
            '   - MENTION : Passable, Bien, Tres Bien',
            '   - AUTORISE : OUI ou NON (d√©faut: OUI)',
            '',
            '4. R√àGLES IMPORTANTES:',
            '   - Email et t√©l√©phone doivent √™tre uniques',
            '   - Les dates au format JJ/MM/AAAA',
            '   - Respecter exactement les valeurs pour GENRE, TYPE, NIVEAU',
            '   - V√©rifier les codes de fili√®re dans l\'onglet "Liste Fili√®res"',
            '',
            '5. APR√àS REMPLISSAGE:',
            '   - Enregistrez le fichier',
            '   - Importez-le dans l\'interface d\'administration',
            '   - Consultez le rapport d\'import pour voir les erreurs √©ventuelles'
        ];
        
        instructions.forEach((instruction, index) => {
            instructionsSheet.getCell(`A${index + 4}`).value = instruction;
            if (instruction.startsWith('   ')) {
                instructionsSheet.getCell(`A${index + 4}`).font = { size: 11 };
            }
        });
        
        instructionsSheet.getColumn('A').width = 90;
        
        // Onglet 2: Mod√®le √† remplir
        const modelSheet = workbook.addWorksheet('Etudiants');
        
        modelSheet.columns = [
            { header: 'MATRICULE', key: 'matricule', width: 15 },
            { header: 'NUMERO_DOSSIER', key: 'numero_dossier', width: 15 },
            { header: 'NOM*', key: 'nom', width: 20 },
            { header: 'PRENOM*', key: 'prenom', width: 20 },
            { header: 'DATE_NAISSANCE*', key: 'date_naissance', width: 15 },
            { header: 'LIEU_NAISSANCE*', key: 'lieu_naissance', width: 20 },
            { header: 'EMAIL*', key: 'email', width: 30 },
            { header: 'TELEPHONE*', key: 'telephone', width: 15 },
            { header: 'GENRE*', key: 'genre', width: 12 },
            { header: 'NATIONALITE*', key: 'nationalite', width: 15 },
            { header: 'ADRESSE*', key: 'adresse', width: 40 },
            { header: 'TYPE', key: 'type', width: 12 },
            { header: 'NIVEAU', key: 'niveau', width: 10 },
            { header: 'FILIERE_CODE', key: 'filiere_code', width: 20 },
            { header: 'TYPE_BAC', key: 'type_bac', width: 12 },
            { header: 'LIEU_OBTENTION', key: 'lieu_obtention', width: 20 },
            { header: 'ANNEE_OBTENTION', key: 'annee_obtention', width: 15 },
            { header: 'MENTION', key: 'mention', width: 15 },
            { header: 'AUTORISE', key: 'autorise', width: 12 }
        ];
        
        // Style en-t√™te
        modelSheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
        modelSheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '667eea' }
        };
        modelSheet.getRow(1).alignment = { horizontal: 'center', vertical: 'middle' };
        modelSheet.getRow(1).height = 25;
        
        // Exemples
        const exemples = [
            {
                matricule: '',
                numero_dossier: 'UDH123456',
                nom: 'MOUSSA',
                prenom: 'A√Øcha',
                date_naissance: '15/03/2000',
                lieu_naissance: 'Niamey',
                email: 'aicha.moussa@example.com',
                telephone: '+22790123456',
                genre: 'feminin',
                nationalite: 'nigerienne',
                adresse: 'Quartier Plateau, Niamey',
                type: 'nouveau',
                niveau: 'L1',
                filiere_code: 'INFORMATIQUE',
                type_bac: 'BAC C',
                lieu_obtention: 'Niamey',
                annee_obtention: '2024-2025',
                mention: 'Bien',
                autorise: 'OUI'
            },
            {
                matricule: '2023UDH0001',
                numero_dossier: '',
                nom: 'IBRAHIM',
                prenom: 'Mamane',
                date_naissance: '20/08/1999',
                lieu_naissance: 'Tahoua',
                email: 'mamane.ibrahim@example.com',
                telephone: '+22791234567',
                genre: 'masculin',
                nationalite: 'nigerienne',
                adresse: 'Commune I, Tahoua',
                type: 'ancien',
                niveau: 'L2',
                filiere_code: 'MATHEMATIQUES',
                type_bac: 'BAC C',
                lieu_obtention: 'Tahoua',
                annee_obtention: '2023-2024',
                mention: 'Tres Bien',
                autorise: 'OUI'
            }
        ];
        
        exemples.forEach(exemple => {
            modelSheet.addRow(exemple);
        });
        
        // Style des exemples
        [2, 3].forEach(rowNum => {
            modelSheet.getRow(rowNum).eachCell(cell => {
                cell.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: 'FFF3CD' }
                };
                cell.font = { italic: true, color: { argb: '856404' } };
            });
        });
        
        // Onglet 3: Liste des fili√®res
        const filieresSheet = workbook.addWorksheet('Liste Filieres');
        
        const filieresResult = await pool.query(`
            SELECT f.nom as code, f.libelle, fac.nom as faculte
            FROM filieres f
            JOIN facultes fac ON f.faculte_id = fac.id
            WHERE f.active = true
            ORDER BY fac.nom, f.nom
        `);
        
        filieresSheet.columns = [
            { header: 'CODE FILI√àRE', key: 'code', width: 20 },
            { header: 'LIBELL√â', key: 'libelle', width: 40 },
            { header: 'FACULT√â', key: 'faculte', width: 15 }
        ];
        
        filieresSheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
        filieresSheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '28a745' }
        };
        
        filieresResult.rows.forEach(row => {
            filieresSheet.addRow(row);
        });
        
        // Onglet 4: Valeurs autoris√©es
        const valeursSheet = workbook.addWorksheet('Valeurs Autorisees');
        
        valeursSheet.columns = [
            { header: 'CHAMP', key: 'champ', width: 20 },
            { header: 'VALEURS POSSIBLES', key: 'valeurs', width: 60 }
        ];
        
        valeursSheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFF' } };
        valeursSheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'ffc107' }
        };
        
        const valeurs = [
            { champ: 'GENRE', valeurs: 'masculin, feminin' },
            { champ: 'TYPE', valeurs: 'nouveau, ancien' },
            { champ: 'NIVEAU', valeurs: 'L1, L2, L3, M1, M2' },
            { champ: 'TYPE_BAC', valeurs: 'BAC A, BAC C, BAC D, BAC G' },
            { champ: 'MENTION', valeurs: 'Passable, Bien, Tres Bien, Excellent' },
            { champ: 'AUTORISE', valeurs: 'OUI, NON' },
            { champ: 'NATIONALITE', valeurs: 'nigerienne, francaise, autre' },
            { champ: 'LIEU_OBTENTION', valeurs: 'Dosso, Niamey, Tahoua, Agadez, Maradi, Tillab√©ri, Zinder, Diffa' }
        ];
        
        valeurs.forEach(row => {
            valeursSheet.addRow(row);
        });
        
        // G√©n√©rer le fichier
        const filename = 'Modele_Import_Etudiants.xlsx';
        
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        await workbook.xlsx.write(res);
        res.end();
        
        console.log('Mod√®le g√©n√©r√© avec succ√®s');
        
    } catch (error) {
        console.error('Erreur g√©n√©ration mod√®le:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la g√©n√©ration du mod√®le',
            details: error.message
        });
    }
});

// Importer des √©tudiants depuis Excel
app.post('/api/admin/etudiants/import-excel', authenticateToken, requireAdmin, upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({
                success: false,
                error: 'Aucun fichier fourni'
            });
        }
        
        console.log('Import fichier √©tudiants:', req.file.originalname);
        
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        await workbook.xlsx.readFile(req.file.path);
        
        const worksheet = workbook.getWorksheet('Etudiants');
        
        if (!worksheet) {
            fs.unlinkSync(req.file.path);
            return res.status(400).json({
                success: false,
                error: 'Onglet "Etudiants" non trouv√© dans le fichier'
            });
        }
        
        const data = [];
        const headers = {};
        
        // Lire les en-t√™tes
        worksheet.getRow(1).eachCell((cell, colNumber) => {
            headers[colNumber] = cell.value;
        });
        
        console.log('En-t√™tes trouv√©s:', Object.values(headers));
        
        // Lire les donn√©es
        worksheet.eachRow((row, rowNumber) => {
            if (rowNumber > 1) {
                const rowData = {};
                row.eachCell((cell, colNumber) => {
                    const header = headers[colNumber];
                    rowData[header] = cell.value;
                });
                
                // Ignorer les lignes vides
                if (rowData['NOM*'] || rowData.NOM) {
                    data.push(rowData);
                }
            }
        });
        
        console.log(`${data.length} lignes √† traiter`);
        
        let imported = 0;
        let errors = [];
        let duplicates = 0;
        
        for (let i = 0; i < data.length; i++) {
            const row = data[i];
            const rowNum = i + 2; // +2 car commence √† 1 et en-t√™te
            
            try {
                // Extraire les donn√©es
                const nom = (row['NOM*'] || row.NOM || '').toString().trim().toUpperCase();
                const prenom = (row['PRENOM*'] || row.PRENOM || '').toString().trim();
                const dateNaissance = row['DATE_NAISSANCE*'] || row.DATE_NAISSANCE;
                const lieuNaissance = (row['LIEU_NAISSANCE*'] || row.LIEU_NAISSANCE || '').toString().trim();
                const email = (row['EMAIL*'] || row.EMAIL || '').toString().trim().toLowerCase();
                const telephone = (row['TELEPHONE*'] || row.TELEPHONE || '').toString().trim();
                const genre = (row['GENRE*'] || row.GENRE || '').toString().trim().toLowerCase();
                const nationalite = (row['NATIONALITE*'] || row.NATIONALITE || '').toString().trim().toLowerCase();
                const adresse = (row['ADRESSE*'] || row.ADRESSE || '').toString().trim();
                
                // Champs optionnels
                const matricule = row.MATRICULE ? row.MATRICULE.toString().trim() : null;
                const numeroDossier = row.NUMERO_DOSSIER ? row.NUMERO_DOSSIER.toString().trim() : null;
                const type = row.TYPE ? row.TYPE.toString().trim().toLowerCase() : 'nouveau';
                const niveau = row.NIVEAU ? row.NIVEAU.toString().trim().toUpperCase() : null;
                const filiereCode = row.FILIERE_CODE ? row.FILIERE_CODE.toString().trim().toUpperCase() : null;
                const typeBac = row.TYPE_BAC ? row.TYPE_BAC.toString().trim().toUpperCase() : null;
                const lieuObtention = row.LIEU_OBTENTION ? row.LIEU_OBTENTION.toString().trim() : null;
                const anneeObtention = row.ANNEE_OBTENTION ? row.ANNEE_OBTENTION.toString().trim() : null;
                const mention = row.MENTION ? row.MENTION.toString().trim() : null;
                const autorise = !row.AUTORISE || row.AUTORISE.toString().trim().toUpperCase() === 'OUI';
                
                // Validations
                if (!nom || !prenom || !dateNaissance || !lieuNaissance || !email || !telephone || !genre || !nationalite || !adresse) {
                    errors.push(`Ligne ${rowNum}: Champs obligatoires manquants`);
                    continue;
                }
                
                // Valider le genre
                if (!['masculin', 'feminin'].includes(genre)) {
                    errors.push(`Ligne ${rowNum}: Genre invalide "${genre}" (doit √™tre masculin ou feminin)`);
                    continue;
                }
                
                // Valider le type
                if (!['nouveau', 'ancien'].includes(type)) {
                    errors.push(`Ligne ${rowNum}: Type invalide "${type}" (doit √™tre nouveau ou ancien)`);
                    continue;
                }
                
                // Formater la date
                let dateNaissanceFormatted;
                if (dateNaissance instanceof Date) {
                    dateNaissanceFormatted = dateNaissance.toISOString().split('T')[0];
                } else {
                    const dateStr = dateNaissance.toString();
                    const parts = dateStr.split('/');
                    if (parts.length === 3) {
                        dateNaissanceFormatted = `${parts[2]}-${parts[1].padStart(2, '0')}-${parts[0].padStart(2, '0')}`;
                    } else {
                        errors.push(`Ligne ${rowNum}: Date de naissance invalide "${dateNaissance}" (format attendu: JJ/MM/AAAA)`);
                        continue;
                    }
                }
                
                // V√©rifier les doublons
                const checkDuplicate = await pool.query(
                    'SELECT id FROM etudiants WHERE email = $1 OR telephone = $2',
                    [email, telephone]
                );
                
                if (checkDuplicate.rows.length > 0) {
                    duplicates++;
                    errors.push(`Ligne ${rowNum}: Email ou t√©l√©phone d√©j√† existant (${nom} ${prenom})`);
                    continue;
                }
                
                // R√©cup√©rer l'ID de la fili√®re si sp√©cifi√©e
                let filiereId = null;
                if (filiereCode) {
                    const filiereResult = await pool.query(
                        'SELECT id FROM filieres WHERE nom = $1',
                        [filiereCode]
                    );
                    
                    if (filiereResult.rows.length > 0) {
                        filiereId = filiereResult.rows[0].id;
                    } else {
                        errors.push(`Ligne ${rowNum}: Fili√®re "${filiereCode}" non trouv√©e (√©tudiant import√© sans fili√®re)`);
                    }
                }
                
                // Ins√©rer l'√©tudiant
                const result = await pool.query(
                    `INSERT INTO etudiants (
                        matricule, numero_dossier, nom, prenom, date_naissance, lieu_naissance,
                        email, telephone, genre, nationalite, adresse, type, niveau, filiere_id,
                        type_bac, lieu_obtention, annee_obtention, mention, autorise_inscription
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19)
                    RETURNING id`,
                    [
                        matricule, numeroDossier, nom, prenom, dateNaissanceFormatted, lieuNaissance,
                        email, telephone, genre, nationalite, adresse, type, niveau, filiereId,
                        typeBac, lieuObtention, anneeObtention, mention, autorise
                    ]
                );
                
                imported++;
                console.log(`√âtudiant import√©: ${nom} ${prenom} (ID: ${result.rows[0].id})`);
                
            } catch (error) {
                errors.push(`Ligne ${rowNum}: ${error.message}`);
                console.error(`Erreur ligne ${rowNum}:`, error);
            }
        }
        
        // Supprimer le fichier temporaire
        fs.unlinkSync(req.file.path);
        
        const response = {
            success: true,
            message: `Import termin√©: ${imported} √©tudiant(s) import√©(s)`,
            imported: imported,
            duplicates: duplicates,
            errors: errors.length > 0 ? errors.slice(0, 50) : undefined,
            total_errors: errors.length,
            total_processed: data.length
        };
        
        console.log(`Import termin√©: ${imported} import√©s, ${duplicates} doublons, ${errors.length} erreurs`);
        
        res.json(response);
        
    } catch (error) {
        console.error('Erreur import √©tudiants:', error);
        
        if (req.file && fs.existsSync(req.file.path)) {
            fs.unlinkSync(req.file.path);
        }
        
        res.status(500).json({
            success: false,
            error: 'Erreur lors de l\'import',
            details: error.message
        });
    }
});


app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../depot/index.html'));
});

// Initialisation de la base de donn√©es
async function initializeDatabase() {
  try {
    console.log('üîß Initialisation de la base de donn√©es...');

    // Cr√©er la table users
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        nom VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        telephone VARCHAR(20) UNIQUE NOT NULL,
        mot_de_passe VARCHAR(255) NOT NULL,
        date_naissance DATE,
        role VARCHAR(20) DEFAULT 'user',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // Cr√©er la table facultes
    await pool.query(`
      CREATE TABLE IF NOT EXISTS facultes (
        id SERIAL PRIMARY KEY,
        nom VARCHAR(100) NOT NULL UNIQUE,
        libelle VARCHAR(255) NOT NULL,
        description TEXT,
        active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // Cr√©er la table type_bacs
    await pool.query(`
      CREATE TABLE IF NOT EXISTS type_bacs (
        id SERIAL PRIMARY KEY,
        nom VARCHAR(50) NOT NULL UNIQUE,
        libelle VARCHAR(100) NOT NULL,
        description TEXT,
        active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // Cr√©er la table filieres
    await pool.query(`
      CREATE TABLE IF NOT EXISTS filieres (
        id SERIAL PRIMARY KEY,
        nom VARCHAR(100) NOT NULL,
        libelle VARCHAR(255) NOT NULL,
        description TEXT,
        faculte_id INTEGER NOT NULL REFERENCES facultes(id) ON DELETE RESTRICT,
        capacite_max INTEGER DEFAULT NULL,
        active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(nom, faculte_id)
      );
    `);

    // Cr√©er la table filieres
    await pool.query(`
  CREATE TABLE IF NOT EXISTS diplomes (
    id SERIAL PRIMARY KEY,
    libelle VARCHAR(255) NOT NULL,
    faculte_id INTEGER NOT NULL REFERENCES facultes(id) ON DELETE RESTRICT,
    filiere_id INTEGER NOT NULL REFERENCES filieres(id) ON DELETE RESTRICT,
    active BOOLEAN DEFAULT true,  -- ‚úÖ AJOUT√â
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );
`);


    // Cr√©er la table de liaison filiere_type_bacs
    await pool.query(`
      CREATE TABLE IF NOT EXISTS filiere_type_bacs (
        id SERIAL PRIMARY KEY,
        filiere_id INTEGER NOT NULL REFERENCES filieres(id) ON DELETE CASCADE,
        type_bac_id INTEGER NOT NULL REFERENCES type_bacs(id) ON DELETE CASCADE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(filiere_id, type_bac_id)
      );
    `);

    // Cr√©er la table applications
     await pool.query(`
      CREATE TABLE IF NOT EXISTS applications (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        numero_dossier VARCHAR(50) UNIQUE NOT NULL,
        numero_depot VARCHAR(50),
        
        -- Informations personnelles (VARCHAR simple)
        nom VARCHAR(255) NOT NULL,
        prenom VARCHAR(255) NOT NULL,
        date_naissance DATE NOT NULL,
        lieu_naissance VARCHAR(255) NOT NULL,
        nationalite VARCHAR(50) NOT NULL,  -- VARCHAR au lieu d'ENUM
        genre VARCHAR(20) NOT NULL,       -- VARCHAR au lieu d'ENUM
        adresse TEXT NOT NULL,
        telephone VARCHAR(20) NOT NULL,
        email VARCHAR(255) NOT NULL,
        
        -- Informations baccalaur√©at
        type_bac VARCHAR(50) NOT NULL,
        lieu_obtention VARCHAR(255) NOT NULL,
        annee_obtention VARCHAR(10) NOT NULL,
        mention VARCHAR(50) NOT NULL,
        
        -- Choix de formation
        premier_choix VARCHAR(255) NOT NULL,
        deuxieme_choix VARCHAR(255) NOT NULL,
        troisieme_choix VARCHAR(255) NOT NULL,
        
        -- Documents
        documents JSONB,
        
        -- Statut (VARCHAR au lieu d'ENUM)
        statut VARCHAR(20) DEFAULT 'en-attente',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
     await pool.query(`
      ALTER TABLE applications 
      DROP CONSTRAINT IF EXISTS check_genre,
      DROP CONSTRAINT IF EXISTS check_statut;
      
      ALTER TABLE applications 
      ADD CONSTRAINT check_genre CHECK (genre IN ('masculin', 'feminin')),
      ADD CONSTRAINT check_statut CHECK (statut IN ('en-attente', 'approuve', 'rejete'));
    `).catch(err => {
      console.log('Contraintes d√©j√† existantes ou erreur mineure:', err.message);
    });
    // =================== ROUTES POUR L'INSCRIPTION EN LIGNE ===================

    await pool.query(`
        CREATE TABLE IF NOT EXISTS config_inscriptions (
            id SERIAL PRIMARY KEY,
            annee_universitaire VARCHAR(20) NOT NULL,
            ouvert BOOLEAN DEFAULT false,
            filiere_id INTEGER REFERENCES filieres(id),
            niveau VARCHAR(10),
            date_ouverture TIMESTAMP,
            date_fermeture TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    `);
    
    // Table des √©tudiants
    await pool.query(`
        CREATE TABLE IF NOT EXISTS etudiants (
            id SERIAL PRIMARY KEY,
            matricule VARCHAR(50) UNIQUE,
            numero_dossier VARCHAR(50) UNIQUE,
            
            -- Informations personnelles
            nom VARCHAR(255) NOT NULL,
            prenom VARCHAR(255) NOT NULL,
            date_naissance DATE NOT NULL,
            lieu_naissance VARCHAR(255) NOT NULL,
            nationalite VARCHAR(50) NOT NULL,
            genre VARCHAR(20) NOT NULL,
            adresse TEXT NOT NULL,
            telephone VARCHAR(20) NOT NULL,
            email VARCHAR(255) NOT NULL,
            
            -- Informations bac
            type_bac VARCHAR(50),
            lieu_obtention VARCHAR(255),
            annee_obtention VARCHAR(10),
            mention VARCHAR(50),
            
            -- Statut
            type VARCHAR(20) DEFAULT 'nouveau', -- nouveau ou ancien
            actif BOOLEAN DEFAULT true,
            autoriser_inscription BOOLEAN DEFAULT true,
            
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    `);
    
    // Table des inscriptions
    await pool.query(`
        CREATE TABLE IF NOT EXISTS inscriptions (
            id SERIAL PRIMARY KEY,
            etudiant_id INTEGER NOT NULL REFERENCES etudiants(id) ON DELETE CASCADE,
            filiere_id INTEGER NOT NULL REFERENCES filieres(id) ON DELETE RESTRICT,
            niveau VARCHAR(10) NOT NULL,
            annee_universitaire VARCHAR(20) NOT NULL,
            
            -- Paiement
            mode_paiement VARCHAR(50) NOT NULL,
            telephone_paiement VARCHAR(20),
            montant INTEGER NOT NULL,
            statut_paiement VARCHAR(20) DEFAULT 'en-attente', -- en-attente, valid√©, √©chou√©
            reference_paiement VARCHAR(100),
            
            -- Statut inscription
            statut VARCHAR(20) DEFAULT 'en-cours', -- en-cours, valid√©e, annul√©e
            valide_par INTEGER REFERENCES users(id),
            date_validation TIMESTAMP,
            
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            UNIQUE(etudiant_id, annee_universitaire, filiere_id, niveau)
        );
    `);
    
    // Index
    await pool.query(`
        CREATE INDEX IF NOT EXISTS idx_etudiants_matricule ON etudiants(matricule);
        CREATE INDEX IF NOT EXISTS idx_etudiants_numero_dossier ON etudiants(numero_dossier);
        CREATE INDEX IF NOT EXISTS idx_inscriptions_etudiant ON inscriptions(etudiant_id);
        CREATE INDEX IF NOT EXISTS idx_inscriptions_filiere ON inscriptions(filiere_id);
        CREATE INDEX IF NOT EXISTS idx_inscriptions_statut ON inscriptions(statut);
    `);

    // Cr√©er les index
    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
      CREATE INDEX IF NOT EXISTS idx_users_telephone ON users(telephone);
      CREATE INDEX IF NOT EXISTS idx_applications_user_id ON applications(user_id);
      CREATE INDEX IF NOT EXISTS idx_applications_statut ON applications(statut);
      CREATE INDEX IF NOT EXISTS idx_filieres_faculte_id ON filieres(faculte_id);
      CREATE INDEX IF NOT EXISTS idx_diplomes_faculte_id ON diplomes(faculte_id);
      CREATE INDEX IF NOT EXISTS idx_diplomes_filiere_id ON diplomes(filiere_id);
      CREATE INDEX IF NOT EXISTS idx_filieres_active ON filieres(active);
      CREATE INDEX IF NOT EXISTS idx_filiere_type_bacs_filiere_id ON filiere_type_bacs(filiere_id);
      CREATE INDEX IF NOT EXISTS idx_filiere_type_bacs_type_bac_id ON filiere_type_bacs(type_bac_id);
      CREATE INDEX IF NOT EXISTS idx_facultes_active ON facultes(active);
      CREATE INDEX IF NOT EXISTS idx_type_bacs_active ON type_bacs(active);
    `);

    // Insertion des facult√©s (CORRIG√â - apostrophes √©chapp√©es)
    await pool.query(`
      INSERT INTO facultes (nom, libelle, description) VALUES
      ('FADEG', 'Facult√© de Droit d''√âconomie et de Gestion', 'Facult√© de Droit, √âconomie et Gestion'),
      ('FSA', 'Facult√© des Sciences Agronomiques', 'Facult√© des Sciences Agronomiques'),
      ('FSE', 'Facult√© des Sciences de l''√âducation', 'Facult√© des Sciences de l''√âducation'),
      ('IUT', 'Institut Universitaire de Technologie', 'Institut Universitaire de Technologie')
      ON CONFLICT (nom) DO NOTHING;
    `);

    // Insertion des types de bac
    await pool.query(`
      INSERT INTO type_bacs (nom, libelle, description) VALUES
      ('BAC A', 'Baccalaur√©at A', 'Baccalaur√©at litt√©raire'),
      ('BAC C', 'Baccalaur√©at C', 'Baccalaur√©at scientifique - Math√©matiques et Sciences physiques'),
      ('BAC D', 'Baccalaur√©at D', 'Baccalaur√©at scientifique - Sciences naturelles'),
      ('BAC G', 'Baccalaur√©at G', 'Baccalaur√©at tertiaire - Gestion')
      ON CONFLICT (nom) DO NOTHING;
    `);

    // Insertion des fili√®res
    await pool.query(`
      INSERT INTO filieres (nom, libelle, faculte_id, capacite_max, description) VALUES
      -- Fili√®res FADEG
      ('INFORMATIQUE', 'Informatique', (SELECT id FROM facultes WHERE nom = 'FADEG'), 150, 'Formation en informatique et d√©veloppement'),
      ('MATHEMATIQUES', 'Math√©matiques', (SELECT id FROM facultes WHERE nom = 'FADEG'), 100, 'Formation en math√©matiques pures et appliqu√©es'),
      ('PHYSIQUE', 'Physique', (SELECT id FROM facultes WHERE nom = 'FADEG'), 80, 'Formation en physique th√©orique et exp√©rimentale'),
      ('CHIMIE', 'Chimie', (SELECT id FROM facultes WHERE nom = 'FADEG'), 70, 'Formation en chimie g√©n√©rale et appliqu√©e'),
      ('BIOLOGIE', 'Biologie', (SELECT id FROM facultes WHERE nom = 'FADEG'), 90, 'Formation en sciences biologiques'),
      
      -- Fili√®res FSE
      ('FRANCAIS', 'Fran√ßais', (SELECT id FROM facultes WHERE nom = 'FSE'), 120, '√âtudes fran√ßaises et litt√©rature'),
      ('ANGLAIS', 'Anglais', (SELECT id FROM facultes WHERE nom = 'FSE'), 100, '√âtudes anglaises'),
      ('HISTOIRE', 'Histoire', (SELECT id FROM facultes WHERE nom = 'FSE'), 80, 'Histoire et civilisations'),
      ('GEOGRAPHIE', 'G√©ographie', (SELECT id FROM facultes WHERE nom = 'FSE'), 60, 'G√©ographie humaine et physique'),
      
      -- Fili√®res FSA
      ('MEDECINE', 'M√©decine', (SELECT id FROM facultes WHERE nom = 'FSA'), 50, 'Formation m√©dicale'),
      ('PHARMACIE', 'Pharmacie', (SELECT id FROM facultes WHERE nom = 'FSA'), 40, 'Formation pharmaceutique'),
      
      -- Fili√®res IUT
      ('GESTION', 'Gestion', (SELECT id FROM facultes WHERE nom = 'IUT'), 200, 'Sciences de gestion'),
      ('ECONOMIE', '√âconomie', (SELECT id FROM facultes WHERE nom = 'IUT'), 150, 'Sciences √©conomiques'),
      ('COMPTABILITE', 'Comptabilit√©', (SELECT id FROM facultes WHERE nom = 'IUT'), 120, 'Comptabilit√© et finance')
      ON CONFLICT (nom, faculte_id) DO NOTHING;
    `);

   

    // Attribution des types de bac aux fili√®res
    await pool.query(`
      INSERT INTO filiere_type_bacs (filiere_id, type_bac_id) VALUES
      -- Informatique : C, D
      ((SELECT id FROM filieres WHERE nom = 'INFORMATIQUE'), (SELECT id FROM type_bacs WHERE nom = 'BAC C')),
      ((SELECT id FROM filieres WHERE nom = 'INFORMATIQUE'), (SELECT id FROM type_bacs WHERE nom = 'BAC D')),
      
      -- Math√©matiques : C
      ((SELECT id FROM filieres WHERE nom = 'MATHEMATIQUES'), (SELECT id FROM type_bacs WHERE nom = 'BAC C')),
      
      -- Physique : C, D
      ((SELECT id FROM filieres WHERE nom = 'PHYSIQUE'), (SELECT id FROM type_bacs WHERE nom = 'BAC C')),
      ((SELECT id FROM filieres WHERE nom = 'PHYSIQUE'), (SELECT id FROM type_bacs WHERE nom = 'BAC D')),
      
      -- Chimie : C, D
      ((SELECT id FROM filieres WHERE nom = 'CHIMIE'), (SELECT id FROM type_bacs WHERE nom = 'BAC C')),
      ((SELECT id FROM filieres WHERE nom = 'CHIMIE'), (SELECT id FROM type_bacs WHERE nom = 'BAC D')),
      
      -- Biologie : D
      ((SELECT id FROM filieres WHERE nom = 'BIOLOGIE'), (SELECT id FROM type_bacs WHERE nom = 'BAC D')),
      
      -- Fili√®res litt√©raires : A
      ((SELECT id FROM filieres WHERE nom = 'FRANCAIS'), (SELECT id FROM type_bacs WHERE nom = 'BAC A')),
      ((SELECT id FROM filieres WHERE nom = 'ANGLAIS'), (SELECT id FROM type_bacs WHERE nom = 'BAC A')),
      ((SELECT id FROM filieres WHERE nom = 'HISTOIRE'), (SELECT id FROM type_bacs WHERE nom = 'BAC A')),
      ((SELECT id FROM filieres WHERE nom = 'GEOGRAPHIE'), (SELECT id FROM type_bacs WHERE nom = 'BAC A')),
      
      -- M√©decine : C, D
      ((SELECT id FROM filieres WHERE nom = 'MEDECINE'), (SELECT id FROM type_bacs WHERE nom = 'BAC C')),
      ((SELECT id FROM filieres WHERE nom = 'MEDECINE'), (SELECT id FROM type_bacs WHERE nom = 'BAC D')),
      
      -- Pharmacie : C, D
      ((SELECT id FROM filieres WHERE nom = 'PHARMACIE'), (SELECT id FROM type_bacs WHERE nom = 'BAC C')),
      ((SELECT id FROM filieres WHERE nom = 'PHARMACIE'), (SELECT id FROM type_bacs WHERE nom = 'BAC D')),
      
      -- Fili√®res √©conomiques : A, G, C
      ((SELECT id FROM filieres WHERE nom = 'GESTION'), (SELECT id FROM type_bacs WHERE nom = 'BAC A')),
      ((SELECT id FROM filieres WHERE nom = 'GESTION'), (SELECT id FROM type_bacs WHERE nom = 'BAC G')),
      ((SELECT id FROM filieres WHERE nom = 'ECONOMIE'), (SELECT id FROM type_bacs WHERE nom = 'BAC A')),
      ((SELECT id FROM filieres WHERE nom = 'ECONOMIE'), (SELECT id FROM type_bacs WHERE nom = 'BAC C')),
      ((SELECT id FROM filieres WHERE nom = 'ECONOMIE'), (SELECT id FROM type_bacs WHERE nom = 'BAC G')),
      ((SELECT id FROM filieres WHERE nom = 'COMPTABILITE'), (SELECT id FROM type_bacs WHERE nom = 'BAC G')),
      ((SELECT id FROM filieres WHERE nom = 'COMPTABILITE'), (SELECT id FROM type_bacs WHERE nom = 'BAC C'))
      ON CONFLICT (filiere_id, type_bac_id) DO NOTHING;
    `);

    console.log('‚úÖ Base de donn√©es initialis√©e avec succ√®s');
    
    // Cr√©er un utilisateur admin par d√©faut
    await createDefaultAdmin();

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:', error);
    if (process.env.NODE_ENV !== 'production') {
      process.exit(1);
    }
  }
}

// Cr√©ation de l'administrateur par d√©faut
async function createDefaultAdmin() {
  try {
    const adminEmail = 'admin@edufile.com';
    const adminPassword = 'admin123';
    
    const userCheck = await pool.query('SELECT id FROM users WHERE email = $1', [adminEmail]);
    
    if (userCheck.rows.length === 0) {
      const passwordHash = await bcrypt.hash(adminPassword, 10);
      
      await pool.query(
        'INSERT INTO users (nom, email, telephone, mot_de_passe, role) VALUES ($1, $2, $3, $4, $5)',
        ['Administrateur Principal', adminEmail, '+227123456789', passwordHash, 'admin']
      );
      
      console.log('üë§ Administrateur par d√©faut cr√©√©:');
      console.log('   Email: admin@edufile.com');
      console.log('   Mot de passe: admin123');
      console.log('   ‚ö†Ô∏è  CHANGEZ CES IDENTIFIANTS EN PRODUCTION !');
    }
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de l\'admin:', error);
  }
}

// D√©marrage du serveur
async function startServer() {
  try {
    // Initialiser la base de donn√©es
    await initializeDatabase();
    
    // D√©marrer le serveur
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ Serveur EduFile d√©marr√© sur le port ${PORT}`);
      console.log(`üîó API disponible sur: http://localhost:${PORT}/api`);
      console.log(`üìÅ Frontend disponible sur: http://localhost:${PORT}`);
      console.log(`üíæ Base de donn√©es: PostgreSQL`);
    });

    // Gestion de l'arr√™t propre du serveur
    const gracefulShutdown = async (signal) => {
      console.log(`\n${signal} re√ßu, arr√™t propre du serveur...`);
      server.close(async () => {
        console.log('üî¥ Serveur HTTP ferm√©');
        try {
          await pool.end();
          console.log('‚úÖ Connexions PostgreSQL ferm√©es proprement');
        } catch (error) {
          console.error('Erreur lors de la fermeture des connexions:', error);
        }
        process.exit(0);
      });
    };

    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
    if (process.env.NODE_ENV !== 'production') {
      process.exit(1);
    }
  }
}

// D√©marrer le serveur
startServer();

module.exports = app;